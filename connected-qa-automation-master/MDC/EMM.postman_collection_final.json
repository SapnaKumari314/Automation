{
	"info": {
		"_postman_id": "c3d68e4f-7712-42ed-a0eb-13b7fc4cbaf8",
		"name": "EMM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clean_Up_device",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"deviceserial\", \"189ba5405bc8\");\r",
							"pm.environment.set(\"ocppId\", \"00120C2DF6A84401\");\r",
							"pm.environment.set(\"ocppId1\", \"00141648D8841501\");\r",
							"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the EMM details when device not in EMM mode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(false)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(false)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device Status when device not in EMM mode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"pm.test(\"validation for ocppid\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(\"\")\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(false)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(false)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_without_BulkSoc_TopOffSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Updated EMM details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"ocppid = pm.environment.get(\"ocppId\")\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"ocppId\"]).to.deep.equal(ocppid)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated Device Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"pm.test(\"validation for reponse\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(true)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_BulkSoc_withoutTopOffSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bulkSoc\": 66,\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Updated EMM details_Updated_BulkSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(66)\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated Device Status BulkSoc Updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"pm.test(\"validation for reponse\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(66)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(true)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_without_BulkSoc_withTopOffSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"topOffSoc\": 77,\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Updated EMM details_Updated_TopOffSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(77)\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated Device Status TopOffSoc_",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"pm.test(\"validation for reponse\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(77)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(true)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_without_BulkSoc_withTopOffSoc_Different_Ocppid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"topOffSoc\": 55,\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Updated EMM details_Updated_TopOffSoc_different_Dispernser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId1\"))\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(55)\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Updated Device Status TopOffSoc_Different_Dispenser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"pm.test(\"validation for reponse\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId1\"))\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(55)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(true)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_BulkSoc_withTopOffSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"topOffSoc\": 99,\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\",\r\n  \"bulkSoc\": 88\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Updated EMM details_Updated_BulkSoc_TopSoc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(99)\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(88)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Device Status when EMM mode is true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"validation for reponse\",function(){\r",
							"    pm.expect(response_data[\"emm\"][\"ocppId\"]).to.deep.equal(pm.environment.get(\"ocppId\"))\r",
							"    pm.expect(response_data[\"emm\"][\"bulkSoc\"]).to.deep.equal(88)\r",
							"    pm.expect(response_data[\"emm\"][\"topOffSoc\"]).to.deep.equal(99)\r",
							"    pm.expect(response_data[\"emm\"][\"enabled\"]).to.deep.equal(true)\r",
							"    pm.expect(response_data[\"emm\"][\"forceSwitch\"]).to.deep.equal(true)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_set_EMM_False",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Device Status when EMM mode is false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json();\r",
							"\r",
							"disepnsers_data = response_data.dispensers\r",
							"//console.log(disepnsers_data.length)\r",
							"\r",
							"pm.test(\"validation for the ocppid\",function(){\r",
							"    for (i=0;i<disepnsers_data.length;i++){\r",
							"    if(disepnsers_data[i].id == pm.environment.get(\"ocppId\")){\r",
							"        break;\r",
							"    }\r",
							"    else{\r",
							"        continue;\r",
							"    }\r",
							"\r",
							"}\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET EMM details when EMM is false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"ocppid = pm.environment.get(\"ocppId\")\r",
							"\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"bulkSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"topOffSoc\"]).to.deep.equal(0)\r",
							"    pm.expect(response_data[\"enabled\"]).to.deep.equal(false)\r",
							"    pm.expect(response_data[\"forceSwitch\"]).to.deep.equal(false)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "set the next dispenser when device is not EMM mode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Repsone to be 200 Ok\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": false,\r\n  \"ocppId\": \"{{ocppId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_OutOfRangeBulkSoc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 400\",function(){\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Bulk soc is out of range 1-110\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\",\r\n  \"bulkSoc\": 200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_InvalidFormat_BulkSoc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 400\",function(){\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\",\r\n  \"bulkSoc\": \"proterra\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_outOfRange_TopOffSoc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 400\",function(){\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"topOffSoc\": \"proterra\",\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\",\r\n  \"bulkSoc\": 77\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_EMM_Details_with_InvalidFormat_TopOffSoc",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code to be 400\",function(){\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"topOffSoc\": \"proterra\",\r\n  \"enabled\": true,\r\n  \"forceSwitch\": true,\r\n  \"ocppId\": \"{{ocppId}}\",\r\n  \"bulkSoc\": 77\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reboot Device Invalid device id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 404\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:12fajhfds76 does not exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/12fajhfds76/reboot",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"12fajhfds76",
						"reboot"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the EMM details for Invalid device id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 404\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:123kjfoiuafu does not exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/123kjfoiuafu/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"123kjfoiuafu",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update EMM details Invalid Device serial",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 404\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:iudsfusahfd does not exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n  \"enabled\": true,\r\n  \"ocppId\": \"dfsadf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/iudsfusahfd/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"iudsfusahfd",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update EMM details invalid ocppid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 404\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Could not find ocppid dfsadf for device with serial:189ba5405bc8\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n  \"enabled\": true,\r\n  \"ocppId\": \"dfsadf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update EMM details bulk soc an topOff soc without sending Occpid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 400\",function(){\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"ocppid is missing\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n  \"enabled\": true,\r\n  \"topOffSoc\": 30,\r\n  \"bulkSoc\": 110\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/private/devices/{{deviceserial}}/emm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"{{deviceserial}}",
						"emm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Device Status Invalid Device ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 404\",function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})\r",
							"var response_data = pm.response.json()\r",
							"\r",
							"pm.test(\"Response_body validation\",function(){\r",
							"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
							"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
							"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:afoiuefhaj does not exist\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/devices/afoiuefhaj/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"devices",
						"afoiuefhaj",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reboot Device Valid Device id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"respone code to be 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/private/{{deviceserial}}/reboot",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"private",
						"{{deviceserial}}",
						"reboot"
					]
				}
			},
			"response": []
		}
	]
}