{
	"info": {
		"_postman_id": "78cc4f86-14a7-4827-be0c-3c79b1fb4e66",
		"name": "MDC_REST_API_TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "accesstoken_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20cd64f8-bf17-49b3-a281-dc545019519b",
								"exec": [
									"pm.test(\"response_status_validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var admin_token = pm.response.text()",
									"console.log(admin_token)",
									"pm.environment.set(\"admin_token\",admin_token)",
									"",
									"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
									"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\": \"jadapa@proterra.com\",\n\"userPassword\": \"!Nno0m1nds\"\n}"
						},
						"url": {
							"raw": "https://exp-api.proterra.com/exp-ams-dev/v1/cognitoLogin",
							"protocol": "https",
							"host": [
								"exp-api",
								"proterra",
								"com"
							],
							"path": [
								"exp-ams-dev",
								"v1",
								"cognitoLogin"
							]
						}
					},
					"response": []
				},
				{
					"name": "accesstoken_tech",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a454b045-1ce7-4241-b6a1-6c251d67dca4",
								"exec": [
									"pm.test(\"response_status_validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var tech_token = pm.response.text()",
									"console.log(tech_token)",
									"pm.environment.set(\"tech_token\",tech_token)",
									"pm.environment.set(\"UnAuthorizedCode\",\"eyJraWQiOiJxdWxRc2RFWmw2ckZydGdCajExY0NLRktkdUUzVjRjWGRlS0N0TzBnbTJ3PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIzMjkyM2E5Yy03MjcwLTQzYjctYTA5OS1jNTg0NDIwYzdiY2EiLCJ6b25laW5mbyI6IjJjYmJmZDBhLTBmZjctNDA2Mi04OWRhLWJmMmZhNjM4MDdiNyIsImN1c3RvbTpmZWRVc2VyUm9sZSI6Ik9UQV9hZG1pbiIsImN1c3RvbTp1c2VyTmFtZSI6ImphZGFwYUBwcm90ZXJyYS5jb20iLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9UTnJ5UHY5ZFEiLCJjdXN0b206YXNzaWduZWRSb2xlIjoibmEiLCJjdXN0b206dGVuYW50SWQiOiIyY2JiZmQwYS0wZmY3LTQwNjItODlkYS1iZjJmYTYzODA3YjciLCJjdXN0b206dXNlclJvbGUiOiJURU5BTlRfQURNSU4iLCJjdXN0b206bGFzdE1vZGlmaWVkVGltZSI6IjE2MDM0NDI2MDY3MDYiLCJhdXRoX3RpbWUiOjE2MDYyMDAwODcsImV4cCI6MTYwNjIwMzY4NywiaWF0IjoxNjA2MjAwMDg3LCJlbWFpbCI6ImphZGFwYUBwcm90ZXJyYS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY3VzdG9tOmludGVybmFsVXNlciI6IjAiLCJjdXN0b206bGFzdE5hbWUiOiJBZGFwYSIsImN1c3RvbTpyb2xlSW5mb3JtYXRpb24iOiJ0ZW5hbnRfYWRtaW4iLCJjb2duaXRvOnVzZXJuYW1lIjoiMzI5MjNhOWMtNzI3MC00M2I3LWEwOTktYzU4NDQyMGM3YmNhIiwiY3VzdG9tOnVzZXJJZCI6IjljOGRlOTVlLTc1N2EtNDAxOS1hNDFlLTRiNWQxYzY3NTllOSIsImF1ZCI6ImdsdmhnMGhxaHFxYmRmdWFydmZzdWc0cnQiLCJjdXN0b206Y3JlYXRlZFRpbWUiOiIxNjAzNDQyNDYxMjcyIiwiZXZlbnRfaWQiOiI2ZTc4ZWJiYi0xNzMwLTRkN2YtYjRiYy1hODIyMzE5MjVmNjgiLCJjdXN0b206Zmlyc3ROYW1lIjoiU2FuZGVlcCIsInRva2VuX3VzZSI6ImlkIiwiY3VzdG9tOmFkZHJlc3NMaW5lMSI6IjE1NTIwIEVsbGVyc2xpZSBSZCBTVywgRWRtb250b24sIEFCIFQ2VyAxQTQsIENhbmFkYSIsImN1c3RvbTphZGRyZXNzSWQiOiJjMzJkYzNmZi1lYmVjLTQwYWQtODljMi03ZjJhNTI4ZjZmMDQifQ.Z3C4DsOHKVPtflKKblugC_PHMJKU2QTL7upyruvyxUzBZtFBeE8mvBvmySAeiRoPqAuDwJ4J03gmoIRlgPekHdzkN9GmrODkz_1Xqg647S1S9rddWbUBBWntYPCiipE0CnYJr6q-D_6bUl-wEZ8Hde98nXweSR8TTV6uEuunePJCycCeNbljvyuAcqow_wsHqXNmiGpczbDm6RV74lKQ3hnlYApet2-WiNKbJoJTy8q3L5xckmWyw2V94KBgXDJ8zSqvdZzSw1N7pHmJ45PA6gyG42ZU9-qGLiwAclsJpUr6KACVgmIAj6k_5Qzo6XlbDY8_VYuO7ou589l2cZAsBA\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userName\": \"vtatiparthi@proterra.com\",\n\"userPassword\": \"!Nno0m1nds\"\n}"
						},
						"url": {
							"raw": "https://exp-api.proterra.com/exp-ams-dev/v1/cognitoLogin",
							"protocol": "https",
							"host": [
								"exp-api",
								"proterra",
								"com"
							],
							"path": [
								"exp-ams-dev",
								"v1",
								"cognitoLogin"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Device_group_API",
			"item": [
				{
					"name": "Clean_Up_groups",
					"item": [
						{
							"name": "GET_testgrp_postman",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7bf9912-6f4e-4493-ace9-1a9c27c52cef",
										"exec": [
											"pm.test(\"response_status_validation\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var data = pm.response.json()\r",
											"\r",
											"for(var i=0;i<data.content.length;i++){\r",
											"    if(data.content[i].name == \"testgrp_postman\"){\r",
											"        console.log(data.content[i].id)\r",
											"        pm.environment.set(\"deletegroupid\",data.content[i].id)\r",
											"        break;\r",
											"    }\r",
											"    else{\r",
											"        pm.environment.set(\"deletegroupid\",null)\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bce9f19-fa44-4947-84f1-89eb9e93492d",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
											"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups?search=name&searchTerm=testgrp_postman",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										},
										{
											"key": "search",
											"value": "name"
										},
										{
											"key": "searchTerm",
											"value": "testgrp_postman"
										},
										{
											"key": "sortDirection",
											"value": "ASC",
											"disabled": true
										},
										{
											"key": "sortKeys",
											"value": "name",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_testgrp_postman",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{deletegroupid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{deletegroupid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_testgrp_multidelete_postman1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bb5b186-be53-4302-8357-10ac5d6a0b53",
										"exec": [
											"var data = pm.response.json()\r",
											"var Content_size = data.content.length\r",
											"\r",
											"\r",
											"for(var i=0;i<data.content.length;i++){\r",
											"    if(data.content[i].name == \"testgrp_multidelete_postman1\"){\r",
											"        console.log(data.content[i].id)\r",
											"        pm.environment.set(\"deletemultigroupid1\",data.content[i].id)\r",
											"        break;\r",
											"    }\r",
											"    else{\r",
											"        pm.environment.set(\"deletegroupid1\",null)\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups?pageIndex=0&pageSize=10&search=name&searchTerm=testgrp_multidelete_postman1&sortDirection=ASC&sortKeys=name",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "name"
										},
										{
											"key": "searchTerm",
											"value": "testgrp_multidelete_postman1"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_testgrp_multidelete_postman1",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{deletemultigroupid1}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{deletemultigroupid1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_testgrp_multidelete_postman2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5276dfa4-6cb6-467a-92fb-4691161188b6",
										"exec": [
											"var data = pm.response.json()\r",
											"//var Content_size = data.content.length\r",
											"\r",
											"for(var i=0;i<data.content.length;i++){\r",
											"    if(data.content[i].name == \"testgrp_multidelete_postman2\"){\r",
											"        console.log(data.content[i].id)\r",
											"        pm.environment.set(\"deletemultigroupid2\",data.content[i].id)\r",
											"        break;\r",
											"    }\r",
											"    else{\r",
											"        pm.environment.set(\"deletegroupid2\",null)\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups?pageIndex=0&pageSize=10&search=name&searchTerm=testgrp_multidelete_postman2&sortDirection=ASC&sortKeys=name",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "name"
										},
										{
											"key": "searchTerm",
											"value": "testgrp_multidelete_postman2"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "name"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_testgrp_multidelete_postman2",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{deletemultigroupid2}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{deletemultigroupid2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin and technician",
					"item": [
						{
							"name": "get_devicegroup_list_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16e8bd39-69cd-468f-8b1b-f9818579b8a3",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.response.to.have.jsonBody(\"content\")",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)",
											"pm.expect(response_data[\"size\"]).equals(10)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d32b2c6c-998a-442e-b9b2-c5f89419fb02",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_list_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53bb3c2a-0323-409d-ace3-d2566f2830aa",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.response.to.have.jsonBody(\"content\")",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)",
											"pm.expect(response_data[\"size\"]).equals(10)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dde512d4-d34b-474b-947e-4d5a8bb3bdab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76c500aa-c862-402f-86b8-dc3a09a2e98f",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "022540c1-6f49-4c03-ae7d-9ee378923e54",
										"exec": [
											"pm.environment.set(\"device_grp_name\",\"testgrp_postman\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85e4cf75-7c87-4e35-95e9-38537afc87fc",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp_name\"))",
											"    pm.expect(response_data[\"deviceCount\"]).equals(0)",
											"    // pm.expect(response_data.have.response_data(\"id\"))",
											"});",
											"pm.environment.set(\"devicegrp_id\", response_data[\"id\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe87cf93-0497-4b8b-8c3b-5080d0bad009",
										"exec": [
											"pm.environment.set(\"device_grp_name\",\"testgrp_postman\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup_duplicatename_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de22d08a-ed8e-438f-8e08-53d5d81228c6",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Conflict\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(409)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ffc6c7bb-6337-47c8-9978-f1d081cb5fea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_device_ingrp_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dac4f63-321d-4cbb-a065-947beef6ba7d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_device_ingrp_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6754d967-fa45-4e6a-b348-bb874fdff726",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// No response body for adding device in group, so only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devices_in_group_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecbd4688-3633-4e55-88cf-57b8fe57d846",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"content\")",
											"    pm.response.to.have.jsonBody(\"numberOfElements\")",
											"    pm.expect(response_data[\"numberOfElements\"]).to.deep.equal(1)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devices_in_group_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49a30da9-1118-4796-8c21-18c932364d62",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"content\")",
											"    pm.response.to.have.jsonBody(\"numberOfElements\")",
											"    pm.expect(response_data[\"numberOfElements\"]).to.deep.equal(1)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_device_ingrp_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9433d9af-bc67-457b-aa9d-b9ac3656bd90",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_device_ingrp_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07154106-6031-4a88-99db-af3b126bbcab",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devices_in_group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b48ee5ad-0698-4122-affe-c9ba533e04cb",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"numberOfElements\")",
											"    pm.expect(response_data[\"numberOfElements\"]).to.deep.equal(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_id_technician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0897c4f6-8a57-4413-8543-cff350245b2a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1654b78f-6279-4920-b88c-b661461aa03b",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp_name\"))",
											"    pm.expect(response_data[\"id\"]).to.deep.equal(pm.environment.get(\"devicegrp_id\"))",
											"    pm.expect(response_data[\"deviceCount\"]).to.deep.equal(0)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_id_admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2fc5970a-57bc-403e-bf3b-9159ae9dfb9c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24aeacba-eac7-45cf-a2cd-ad86c9817d8e",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp_name\"))",
											"    pm.expect(response_data[\"id\"]).to.deep.equal(pm.environment.get(\"devicegrp_id\"))",
											"    pm.expect(response_data[\"deviceCount\"]).to.deep.equal(0)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_group_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f5d708c-5f88-42ff-b82c-77bea723b041",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98fe6ef2-5244-426f-ae15-a5b27c380bc7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"groupName\": \"testgrp_postman_updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_group_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02560850-c2f5-4918-89c8-249ab0e748c2",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.environment.set(\"device_grp_name_updated\",\"testgrp_postman_updated\")",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "157e632f-62b8-4298-9f22-149610e78656",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"groupName\": \"testgrp_postman_updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate_updated_grp_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fae7154d-8be2-4993-9e1b-c89f99dab3a4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65ce8703-cea8-4771-9fce-142ed950dbf2",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp_name_updated\"))",
											"    pm.expect(response_data[\"id\"]).to.deep.equal(pm.environment.get(\"devicegrp_id\"))",
											"    pm.expect(response_data[\"deviceCount\"]).to.deep.equal(0)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_devicegroup_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63fe2433-f2a8-4a69-ba0a-e4c71d81306b",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_devicegroup_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5263116e-6e2f-4cf9-b414-a4a413278b11",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_invaliddevicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f899a135-cb3b-4d57-8163-588752ef8fef",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function () {",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device group testgrp does not exist\")  ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/testgrp",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"testgrp"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup1_fordeletemulti",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6668ca3-1c69-4710-8785-160fb872b741",
										"exec": [
											"pm.environment.set(\"device_grp1_multidelete\",\"testgrp_multidelete_postman1\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2b9f1ab-037d-4f43-af08-056c1274328f",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    // pm.expect(response_data.have.response_data(\"id\"))",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp1_multidelete\"))",
											"    pm.expect(response_data[\"deviceCount\"]).equals(0)",
											"",
											"});",
											"pm.environment.set(\"devicegrp1_fordeletemulti_id\", response_data[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_multidelete_postman1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup2_fordeletemulti",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bc9ab48-7465-4e89-8376-4adce2ed222a",
										"exec": [
											"pm.environment.set(\"device_grp2_multidelete\",\"testgrp_multidelete_postman2\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0af8b19f-bb81-4baa-a9ee-5f67f946f66b",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"response_validation\", function(){",
											"    pm.response.to.have.jsonBody(\"id\")",
											"    pm.response.to.have.jsonBody(\"name\")",
											"    pm.response.to.have.jsonBody(\"createdOn\")",
											"    pm.response.to.have.jsonBody(\"deviceCount\")",
											"    // pm.expect(response_data.have.response_data(\"id\"))",
											"    pm.expect(response_data[\"name\"]).to.deep.equal(pm.environment.get(\"device_grp2_multidelete\"))",
											"    pm.expect(response_data[\"deviceCount\"]).equals(0)",
											"",
											"});",
											"pm.environment.set(\"devicegrp2_fordeletemulti_id\", response_data[\"id\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_multidelete_postman2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletemultilple_groups_technician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cc5e574-0651-4a99-9739-bb4214df6b1c",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b52aba7a-5c5f-43e5-8e7b-38d18a51af22",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"id\": \"{{devicegrp1_fordeletemulti_id}}\"\n},\n{\n  \"id\": \"{{devicegrp2_fordeletemulti_id}}\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletemultilple_groups_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7c3732a-998c-482b-921a-982b04118fec",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab17349b-0569-43e4-b4d1-9bcba085c385",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"id\": \"{{devicegrp1_fordeletemulti_id}}\"\n},\n{\n  \"id\": \"{{devicegrp2_fordeletemulti_id}}\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_invalidid_technican",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82fbbdf0-97f2-4784-8b11-0dae08738ed9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79e627c1-f822-4bf4-a21b-abe4c64f5924",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp1_fordeletemulti_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp1_fordeletemulti_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_invalidid_admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "983a4fee-5a22-49eb-a2cd-c92f757e34b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1f200a1-121b-4502-be0b-1b9741cc8dcc",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp1_fordeletemulti_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp1_fordeletemulti_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_grp_list_technican",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61c1de8a-38bd-4f03-a006-b16cb87d54b7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87170561-ced8-4f5a-8a16-163292c7d751",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var response_data = pm.response.json()",
											"",
											"pm.test(\"list of grps not empty\",function(){",
											"    pm.expect(response_data.length).not.null",
											"})  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_grp_list_admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90ddd161-5f6d-47f1-ae6f-83fd1a1bab86",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b66e7456-5240-47e0-93f0-08e14dacf725",
										"exec": [
											"pm.test(\"response_status_validation\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var response_data = pm.response.json()",
											"",
											"pm.test(\"list of grps not empty\",function(){",
											"    pm.expect(response_data.length).not.null",
											"})  "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"list"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "get_devicegroup_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8878c1e-3a7e-4409-a366-776d64fcbfcf",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62a207ec-2023-4323-9aca-7c62fa417e91",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJraWQiOiJxdWxRc2RFWmw2ckZydGdCajExY0NLRktkdUUzVjRjWGRlS0N0TzBnbTJ3PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIzMjkyM2E5Yy03MjcwLTQzYjctYTA5OS1jNTg0NDIwYzdiY2EiLCJ6b25laW5mbyI6IjJjYmJmZDBhLTBmZjctNDA2Mi04OWRhLWJmMmZhNjM4MDdiNyIsImN1c3RvbTpmZWRVc2VyUm9sZSI6Ik9UQV9hZG1pbiIsImN1c3RvbTp1c2VyTmFtZSI6ImphZGFwYUBwcm90ZXJyYS5jb20iLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9UTnJ5UHY5ZFEiLCJjdXN0b206YXNzaWduZWRSb2xlIjoibmEiLCJjdXN0b206dGVuYW50SWQiOiIyY2JiZmQwYS0wZmY3LTQwNjItODlkYS1iZjJmYTYzODA3YjciLCJjdXN0b206dXNlclJvbGUiOiJURU5BTlRfQURNSU4iLCJjdXN0b206bGFzdE1vZGlmaWVkVGltZSI6IjE2MDM0NDI2MDY3MDYiLCJhdXRoX3RpbWUiOjE2MDYyMDAwODcsImV4cCI6MTYwNjIwMzY4NywiaWF0IjoxNjA2MjAwMDg3LCJlbWFpbCI6ImphZGFwYUBwcm90ZXJyYS5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY3VzdG9tOmludGVybmFsVXNlciI6IjAiLCJjdXN0b206bGFzdE5hbWUiOiJBZGFwYSIsImN1c3RvbTpyb2xlSW5mb3JtYXRpb24iOiJ0ZW5hbnRfYWRtaW4iLCJjb2duaXRvOnVzZXJuYW1lIjoiMzI5MjNhOWMtNzI3MC00M2I3LWEwOTktYzU4NDQyMGM3YmNhIiwiY3VzdG9tOnVzZXJJZCI6IjljOGRlOTVlLTc1N2EtNDAxOS1hNDFlLTRiNWQxYzY3NTllOSIsImF1ZCI6ImdsdmhnMGhxaHFxYmRmdWFydmZzdWc0cnQiLCJjdXN0b206Y3JlYXRlZFRpbWUiOiIxNjAzNDQyNDYxMjcyIiwiZXZlbnRfaWQiOiI2ZTc4ZWJiYi0xNzMwLTRkN2YtYjRiYy1hODIyMzE5MjVmNjgiLCJjdXN0b206Zmlyc3ROYW1lIjoiU2FuZGVlcCIsInRva2VuX3VzZSI6ImlkIiwiY3VzdG9tOmFkZHJlc3NMaW5lMSI6IjE1NTIwIEVsbGVyc2xpZSBSZCBTVywgRWRtb250b24sIEFCIFQ2VyAxQTQsIENhbmFkYSIsImN1c3RvbTphZGRyZXNzSWQiOiJjMzJkYzNmZi1lYmVjLTQwYWQtODljMi03ZjJhNTI4ZjZmMDQifQ.Z3C4DsOHKVPtflKKblugC_PHMJKU2QTL7upyruvyxUzBZtFBeE8mvBvmySAeiRoPqAuDwJ4J03gmoIRlgPekHdzkN9GmrODkz_1Xqg647S1S9rddWbUBBWntYPCiipE0CnYJr6q-D_6bUl-wEZ8Hde98nXweSR8TTV6uEuunePJCycCeNbljvyuAcqow_wsHqXNmiGpczbDm6RV74lKQ3hnlYApet2-WiNKbJoJTy8q3L5xckmWyw2V94KBgXDJ8zSqvdZzSw1N7pHmJ45PA6gyG42ZU9-qGLiwAclsJpUr6KACVgmIAj6k_5Qzo6XlbDY8_VYuO7ou589l2cZAsBA",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c504365-4e71-4c4f-9cba-2f5370874f8d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46011752-3f51-4e63-96d3-eb3b7193a9d2",
										"exec": [
											"pm.environment.set(\"device_grp_name\",\"testgrp_postman\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup_duplicatename",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1234543e-95bb-44a3-aa21-f888c3dfc2ea",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3977c77c-2c34-43a3-81ca-2368e82dbf14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "add_device_ingrp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b689b4e-d41f-4abe-91ef-4acd6f0faa29",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devices_in_group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b394325-2cce-4ed1-940f-d154fe2b41bf",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_device_ingrp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d1801a-7d75-46a0-b2b6-0dbe6dd4dd53",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"serial\": \"189ba5405bd4\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devices_in_group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37dffe7b-90a9-44d7-a60e-6a80baedcfcf",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}/devices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97a08842-b493-48aa-ab8b-48f91ef21fd8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d611aa81-fa68-487b-a061-d95a969faecd",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d1173b-d827-4408-b903-cf955587a69c",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "776be42b-c8ce-4559-85d4-43eb51aaf9f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_postman_updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_devicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9db1c813-d32d-4d2e-b838-1226e7e3d476",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_invaliddevicegroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a243275-e0e5-45d3-9332-16bf2e698e9d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/testgrp",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"testgrp"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup1_fordeletemulti",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6f532372-6d90-448f-afbd-518f273e2fba",
										"exec": [
											"pm.environment.set(\"device_grp1_multidelete\",\"testgrp_multidelete_postman1\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d287781-c650-4682-bf82-63256ff4fb8a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_multidelete_postman1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "create_devicegroup2_fordeletemulti",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95b08a0c-3688-438d-9a8f-a6872f18dbff",
										"exec": [
											"pm.environment.set(\"device_grp2_multidelete\",\"testgrp_multidelete_postman2\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b351fdd1-2d2c-4f8d-b5ef-e27cf605129b",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testgrp_multidelete_postman2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletemultilple_groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bd17be4-5fdd-4177-9316-23f56735826c",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7423baea-acb4-4513-8496-36a5ad0f6169",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[{\n  \"id\": \"{{devicegrp1_fordeletemulti_id}}\"\n},\n{\n  \"id\": \"{{devicegrp2_fordeletemulti_id}}\"\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_devicegroup_by_invalidid ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec879f9b-f53b-4833-94c9-7a62725f07b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb7f0f5c-93a8-4c19-826c-49e2e15c8c0a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/{{devicegrp1_fordeletemulti_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"{{devicegrp1_fordeletemulti_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_grp_list",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f33121b-0b61-4ed8-9fec-253335c64df4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10f4f107-9ff0-4e22-8ca5-8e280109745a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/groups/list",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"groups",
										"list"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "get_audit_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b58b71ad-49ae-4292-937e-859057475897",
								"exec": [
									"pm.test(\"response_audit\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var response_data = pm.response.json();",
									"console.log(response_data)",
									"",
									"pm.test(\"Response_validation\",function(){",
									"pm.response.to.have.jsonBody(\"content\")",
									"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)",
									"pm.expect(response_data[\"size\"]).equals(10)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bc1af430-f4ad-49a7-8f03-fdb925474058",
								"exec": [
									"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
									"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tenants/{{tenantId}}/audit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tenants",
								"{{tenantId}}",
								"audit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_audit_technician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed257644-0dd9-4b07-9629-7e23deef0da7",
								"exec": [
									"pm.test(\"response_audit\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"var response_data = pm.response.json();",
									"console.log(response_data)",
									"",
									"pm.test(\"Auth_failed_validation\",function(){",
									"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
									"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")",
									"pm.expect(response_data[\"code\"]).to.deep.equal(403)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "153070fb-4917-4531-a79f-fe77913fd7e8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tech_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/tenants/{{tenantId}}/audit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tenants",
								"{{tenantId}}",
								"audit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_audit_invaild_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8033504-2461-4434-9368-96bc2e38598f",
								"exec": [
									"pm.test(\"response_audit_authorization\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"var response_data = pm.response.json();",
									"console.log(response_data)",
									"pm.test(\"Auth_failed_validation\",function(){",
									"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
									"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
									"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd8d6248-08b8-4ca9-b72c-f4e2bde490e1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{UnAuthorizedCode}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/tenants/{{tenantId}}/audit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tenants",
								"{{tenantId}}",
								"audit"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "get_metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8152be32-2343-441a-b8dc-e6656ea80334",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"",
											"",
											"// pm.test(\"response_validation\", function(){",
											"//     pm.response.to.have.jsonBody(\"offline\")",
											"//     pm.response.to.have.jsonBody(\"idle\")",
											"//     pm.response.to.have.jsonBody(\"charging\")",
											"//     pm.response.to.have.jsonBody(\"booting\")",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "404340a0-d851-4179-8ab5-0c647af6f038",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
											"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_metrics_status_offline",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fea08e3-f0dd-446a-bd2e-a745a4d90cca",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"console.log(response_data.length)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data.length).not.equals(null)",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics/offline",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics",
										"offline"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Techncian",
					"item": [
						{
							"name": "get_metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c585bb9-1c57-417d-a509-f93078e0950d",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"// pm.test(\"response_validation\", function(){",
											"//     pm.response.to.have.jsonBody(\"offline\")",
											"//     pm.response.to.have.jsonBody(\"idle\")",
											"//     pm.response.to.have.jsonBody(\"charging\")",
											"//     pm.response.to.have.jsonBody(\"booting\")",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15d1d187-931e-4e23-848e-1e5afe43b6cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_metrics_status_offline",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d3f7e97-eb0a-4858-8ba3-d2da7387e0df",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data.length).not.equals(null)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics/offline",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics",
										"offline"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "get_metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fd9d46a-a829-404f-836c-386563dd887b",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "208afc44-a7d8-4c05-b514-aadc3413c638",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_metrics_status_offline",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5367f9de-dc7e-44ce-8746-d175f0fa373a",
										"exec": [
											"pm.test(\"response_metrics\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/dashboard/metrics/offline",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"dashboard",
										"metrics",
										"offline"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Eventlogs",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "get_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90d03d14-b893-49a6-bb7c-72d099dfa0c1",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"console.log(response_data.length)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data.length).not.equals(null)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6fcb9cb-9ed1-4164-985f-4535e722c274",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
											"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45d1bc98-7e74-49ee-8837-157b156fba46",
										"exec": [
											"pm.test(\"response_delete_eventlogs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dde4c1af-816c-435c-9daf-a8a7c21c3c11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Techncian",
					"item": [
						{
							"name": "get_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6649d5ea-1afd-452a-87da-dbc5ba13590e",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"console.log(response_data.length)",
											"",
											"pm.test(\"Response_validation\",function(){",
											"pm.expect(response_data.length).not.equals(null)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b938f63f-c64a-424d-a74d-c59dfa06439c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08437f94-127d-44f9-a6ba-bcaca410dd86",
										"exec": [
											"pm.test(\"response_delete_eventlogs\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d8fa391-83e5-44bc-91a3-f4dff9c1fa57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "get_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32b7e12e-595f-4b4e-819e-2294a213bdf8",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f15ae627-b97b-4b60-958c-c2d804d9729a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_eventlogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04e35933-e0d4-4d35-8a5d-c10e82de18e5",
										"exec": [
											"pm.test(\"response_delete_eventlogs\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"var response_data = pm.response.json();",
											"console.log(response_data)",
											"",
											"pm.test(\"Auth_failed_validation\",function(){",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "674ade0c-82e7-412e-b666-39381a4f103d",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{UnAuthorizedCode}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/eventlogs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"eventlogs"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "profile",
			"item": [
				{
					"name": "profile_details_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4cb927a-629d-40dc-855b-43412591b98a",
								"exec": [
									"pm.test(\"response_eventlogs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var response_data = pm.response.json();",
									"console.log(response_data)",
									"pm.test(\"response_validation\", function(){",
									"    pm.response.to.have.jsonBody(\"firstName\")",
									"    pm.response.to.have.jsonBody(\"lastName\")",
									"    pm.response.to.have.jsonBody(\"role\")",
									"    pm.response.to.have.jsonBody(\"email\")",
									"    pm.response.to.have.jsonBody(\"tenantId\")",
									"    pm.expect(response_data[\"role\"]).to.deep.equal(\"admin\")",
									"    pm.expect(response_data[\"tenantId\"]).to.deep.equal(pm.environment.get(\"tenantId\"))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52439c92-9703-4fa1-a7e1-4db0c6c0bb2a",
								"exec": [
									"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")",
									"pm.environment.set(\"base_url\", \"https://exp-api.proterra.com/exp-mdc-device-dev/api/v1/mdcservice/core\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_details_technician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50345ec1-508c-40c9-8ca7-799e4b19226a",
								"exec": [
									"pm.test(\"response_eventlogs\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var response_data = pm.response.json();",
									"console.log(response_data)",
									"pm.test(\"response_validation\", function(){",
									"    pm.response.to.have.jsonBody(\"firstName\")",
									"    pm.response.to.have.jsonBody(\"lastName\")",
									"    pm.response.to.have.jsonBody(\"role\")",
									"    pm.response.to.have.jsonBody(\"email\")",
									"    pm.response.to.have.jsonBody(\"tenantId\")",
									"    pm.expect(response_data[\"role\"]).to.deep.equal(\"technician\")",
									"    pm.expect(response_data[\"tenantId\"]).to.deep.equal(pm.environment.get(\"tenantId\"))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db97b7fd-9669-4721-b3b1-e0538d2ec901",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{tech_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "profile_details_invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb1f08ca-1be8-4c0f-a8c9-284e1f43c381",
								"exec": [
									"pm.test(\"response_eventlogs\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67bd6c56-61c6-49e7-8def-a41cb4777271",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "frergergergfdsferfef"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"profile",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "certficate",
			"item": [
				{
					"name": "Cleanup_certs",
					"item": [
						{
							"name": "delete Certificate ",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/f9decb6730ecdc5cc2f588df36377cdace806ad6b485530ba7ad6cd92fc0dad7",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"f9decb6730ecdc5cc2f588df36377cdace806ad6b485530ba7ad6cd92fc0dad7"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin_Access",
					"item": [
						{
							"name": "Return_List_of_all_certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a582455d-7881-41f8-b8c6-21b170e0e68a",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// Not a paginatied API so Only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd52d5ca-493a-4ee0-bb67-da5df85da9c2",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "add a certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7aea041-9f28-4fc5-bb1f-b0598c6d5f82",
										"exec": [
											"pm.test(\"status code to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.certificateId)\r",
											"\r",
											"pm.test(\"respone body validation\",function(){\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"mdc.certificates\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f2a638c-7642-43a0-8c85-7a36e42c794d",
										"exec": [
											"pm.environment.set(\"certificateId\", \"f9decb6730ecdc5cc2f588df36377cdace806ad6b485530ba7ad6cd92fc0dad7\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"certificateCheckSum\":\"5f1724191646d3d45b29904dbb48485d\",\n\"certificateFileLocation\":\"postman_test0/starpointcertandcacert.crt\",\n\"certificateSignatureLocation\":\"postman_test0/starpointcertandcacert.crt.sign\",\n\"keyCheckSum\":\"f2677b1b4358f84a9512529e4c10fe40\",\n\"keyFileLocation\":\"postman_test0/starpointcert.key\",\n\"keySignatureLocation\":\"postman_test0/starpointcert.key.sign\",\n\"s3BucketName\":\"mdc.certificates\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return details of a certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10f12c0e-bcf8-4939-b1e8-4632519ba1a8",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"var response = pm.response.json()\r",
											"certid = response.certificateId\r",
											"\r",
											"pm.test(\"check for certificateId\", function(){\r",
											"    pm.expect(certid).to.deep.equal(pm.environment.get(\"certificateId\"))\r",
											"    pm.expect(response[\"s3BucketName\"]).to.deep.equal(\"mdc.certificates\")\r",
											"    pm.expect(response[\"certificateFileLocation\"]).to.deep.equal(\"postman_test0/starpointcertandcacert.crt\")\r",
											"    pm.expect(response[\"keyFileLocation\"]).to.deep.equal(\"postman_test0/starpointcert.key\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66aba89c-4b3b-448f-a8a6-f351c0ce675b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-Api-Key",
										"value": "dfafadfas",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return details of a invalid certificateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8ecc53d-9e4e-43d9-9999-9d2c1a91ca35",
										"exec": [
											"pm.test(\"response to have 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"message check\",function(){\r",
											"    pm.expect(pm.environment.get(\"message\")).to.equal(data.message)\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f0c3330-66cb-400f-accd-f18eb7bb3ef9",
										"exec": [
											"pm.environment.set( \"message\",\"Certificate with id:9252b16c0e0 does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/9252b16c0e0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"9252b16c0e0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke_issued_cert",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86404a92-de2c-4a08-b406-6214051fa6e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5efeedf2-f87d-4e56-8da1-20fa4a5ecda3",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"   if (pm.response.status == 200){\r",
											"       pm.response.to.have.status(200)\r",
											"   }\r",
											"   else {\r",
											"       pm.response.to.have.status(404)\r",
											"   }\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\" Response body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke_Cert_which_is_not_issued",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3000332e-c6e0-4d3b-96a4-c89fcd52e9e6",
										"exec": [
											"pm.environment.set(\"message\", \"Certificate with id:f9decb6730ecdc5cc2f588df36377cdace806ad6b485530ba7ad6cd92fc0dad7 is not issued to any device yet\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f7176b5f-95b7-442b-85e0-d53d23a858fb",
										"exec": [
											"pm.test(\"response to have 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\" Response body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Certificate with id:f9decb6730ecdc5cc2f588df36377cdace806ad6b485530ba7ad6cd92fc0dad7 is not issued to any device yet\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "return_list_of_available_certs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cf2030b-5501-4209-ac44-66663686cf1e",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"\r",
											"console.log(data.length)\r",
											"\r",
											"pm.test(\"check for added certificate\", function(){\r",
											"    for(var i = 0;i<data.length;i++){\r",
											"        if(data[i].certificateId == pm.environment.get(\"certificateId\")){\r",
											"            //console.log(data[i].certificateId)\r",
											"            break;\r",
											"        }\r",
											"        else {\r",
											"            continue;\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"// not a paginated API so only Validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/unassigned",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"unassigned"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a valid certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a134d980-c372-44c3-bfe4-a1acea4592e3",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8c6bb70-9bc6-4990-b0ef-f4120020d9ca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a invalid certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "863a2aa6-e19e-4fb7-bb9c-7ca23b0c6b2d",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"message check\",function(){\r",
											"    pm.expect(pm.environment.get(\"message\")).to.equal(data.message)\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1c1a8c5-2de1-4f49-a05d-a1faea56b9dd",
										"exec": [
											"pm.environment.set( \"message\",\"Certificate with id:9252b16c0e0 does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/9252b16c0e0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"9252b16c0e0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Technician_Access",
					"item": [
						{
							"name": "Return_List_of_all_certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fffb6bc7-73c8-4d2c-9aba-0a868403914d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d6cc4b3-f41a-4e9b-9350-0f010604de30",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return details of a certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "206bf987-1b15-4e75-ac20-f3f72aaa8c70",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fee6657d-50e8-4ac7-b3cb-c478c424ee0d",
										"exec": [
											"pm.environment.set(\"certificate\",\"b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificate}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return details of a invalid certificateId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41b059e0-a69c-4ab7-b936-d9389ba57c98",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6409b8c-721b-4af4-ad61-53ed13537395",
										"exec": [
											"pm.environment.set( \"message\",\"Certificate with id:9252b16c0e0 does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/9252b16c0e0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"9252b16c0e0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke_issued_cert",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d281e83-7330-4d24-930d-2a35c02c4277",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "26f237d1-1c44-482c-9fca-2f94b7ba652d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke_Cert_which_is_not_issued",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc79f000-02f7-4bd0-82f0-aadd84bc231c",
										"exec": [
											"pm.environment.set(\"message\", \"Authorization failed\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d43f6331-5ea7-43ae-8475-74d7ccd0786f",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a valid certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1473e6e0-283e-4775-822f-1d862991958a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ee9b78d-517c-49cb-ada6-dc9d7d92c680",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificate}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a invalid certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b8e3d39-bedf-453e-81b3-152a1855adc7",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7eb2d56-e57a-4b1e-80ae-d3f152622aa3",
										"exec": [
											"pm.environment.set( \"message\",\"Authorization failed\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/9252b16c0e0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"9252b16c0e0"
									]
								}
							},
							"response": []
						},
						{
							"name": "return_list_of_available_certs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21cbbb30-ecc1-41eb-8ab4-6f633ce1244b",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a9e7124-43f0-4ee0-8d81-9b5df4be5b64",
										"exec": [
											"pm.environment.set(\"message\", \"Authorization failed\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/unassigned",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"unassigned"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized_Access",
					"item": [
						{
							"name": "Return_List_of_all_certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d4152a3-4842-4e28-8cf6-50d4964408d5",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b570469-dab6-470d-a32b-471f56d8bc69",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return details of a certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed9f4e04-2a54-48be-9f65-713612c5fd44",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17b917ca-9efd-408b-a6f7-0e20f2fc46df",
										"exec": [
											"pm.environment.set(\"certificate\",\"b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificate}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke_issued_cert",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eac1a8de-2518-459e-bf1a-8414d675b49b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f405b96-c4b7-4e7f-a7b8-27f8af8806de",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a valid certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eaffd397-3731-4296-b259-394409cd130a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "405acb18-c256-4924-8e1e-95f336c86e0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/{{certificate}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"{{certificate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "return_list_of_available_certs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "160511b7-31b0-40fc-873f-5b4f41edf05a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb10d86a-ae6f-43a8-b6a3-06120d771bc4",
										"exec": [
											"pm.environment.set(\"message\", \"Authorization failed\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/unassigned",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"unassigned"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "software",
			"item": [
				{
					"name": "CleanUp_Software",
					"item": [
						{
							"name": "list_of_SoftwarePackages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbabe2b6-c776-4496-a8a9-0bc0f609e5e7",
										"exec": [
											"var data = pm.response.json()\r",
											"\r",
											"for(var i = 0;i<data.length;i++){\r",
											"        if(data[i].packageName == \"postman-test-package\" && data[i].s3BucketName == \"postmans3\"){\r",
											"            console.log(data[i].id)\r",
											"            pm.environment.set(\"packageid\", data[i].id);\r",
											"            break;\r",
											"        }\r",
											"        else{\r",
											"            continue;\r",
											"        }\r",
											"        \r",
											"    }\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete software package for cleanup",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{packageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{packageid}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin_Access",
					"item": [
						{
							"name": "get_software_packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "223d1866-26a5-4455-b959-4ca20dbcc1e8",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// Not a paginated API so validating only 200 Ok "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec9a7f29-f3a8-4158-a50e-2c31aa8909fe",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of available software packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc29d943-a7ea-47c9-ac26-6740f8ddc829",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// Not a paginated API so validating only 200 Ok response"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d47d9c61-b206-4761-9988-dd30b321212d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"available"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of eligible devices for software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d82c7ead-b54f-44cd-8edf-a75007c4d472",
										"exec": [
											"pm.environment.set(\"SoftwarePackageid\", \"2ff3ba76-81dc-44ad-a881-8b298dfce8ec\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ad8223b-9e1b-446d-8e1e-8265bff70673",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}/devices?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}",
										"devices"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list of eligible devices for Invalid software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfe58cab-3a2a-4bfc-8da4-05f7ebd1c5a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ae416ad-e628-4ce5-a251-2c57853a305f",
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"response body validtion\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Software package with id:oeafhasodfuhwefajfh does not exist\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/oeafhasodfuhwefajfh/devices?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"oeafhasodfuhwefajfh",
										"devices"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a softwre package ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4f601ee-4503-48f5-beb3-911238435fcb",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"pm.environment.set(\"SoftwarePackageid\",data.id)\r",
											"\r",
											"pm.test(\"responsebody validation\", function(){\r",
											"    pm.expect(data[\"packageName\"]).to.deep.equal(\"postman-test-package\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"This package is created by postman\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"postmans3\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"    pm.expect(data[\"fileSize\"]).to.deep.equal(\"600KB\")\r",
											"    pm.expect(data[\"targetFirmware\"]).to.deep.equal(\"24.09.2020-HF123\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "fdsgaskjfdasl",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true,\r\n  \"targetFirmware\": \"24.09.2020-HF123\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add duplicate software package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4d50a85-04fd-43c7-a53a-a059144e7958",
										"exec": [
											"pm.test(\"status code is 409\",function(){\r",
											"    pm.response.to.have.status(409)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(409)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Conflict\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Software with package name:postman-test-package and version:1.0.1 already exists\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfjkahlkja",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true,\r\n  \"targetFirmware\": \"24.09.2020-HF123\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add_software_package_without_imp_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed4be43f-5f77-4fd3-a2f0-a1bc1be6ccf5",
										"exec": [
											"pm.test(\"status code is 400\",function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"var data = pm.response.json();\r",
											"\r",
											"pm.test(\"message check\", function(){\r",
											"    pm.expect(data.message).to.equal(pm.environment.get(\"message\"))\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(400)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b11a02f-3553-4dbb-b2aa-ab7e467df48a",
										"exec": [
											"pm.environment.set(\"message\",\"target firmware missing\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "sgfsagasg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "get software package by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b14b4e94-c151-4e7b-9000-1bd86c0381c4",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"    \r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"pm.environment.set(\"SoftwarePackageid\",data.id)\r",
											"\r",
											"pm.test(\"responsebody validation\", function(){\r",
											"    pm.expect(data[\"packageName\"]).to.deep.equal(\"postman-test-package\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"This package is created by postman\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"postmans3\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"    pm.expect(data[\"fileSize\"]).to.deep.equal(\"600KB\")\r",
											"    pm.expect(data[\"targetFirmware\"]).to.deep.equal(\"24.09.2020-HF123\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get software package by incorrect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5bb447a-7b70-41eb-859c-aef63cab9f17",
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"    \r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"message check\", function(){\r",
											"    pm.expect(data.message).to.equal(pm.environment.get(\"message\"))\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b228b1eb-75c5-4310-a04b-c418189d6247",
										"exec": [
											"pm.environment.set(\"message\",\"Software package with id:6b966578-823e-fb10b42b8fbd does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/6b966578-823e-fb10b42b8fbd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"6b966578-823e-fb10b42b8fbd"
									]
								}
							},
							"response": []
						},
						{
							"name": "update software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff5429c0-42a6-4972-b11a-e45f55828d48",
										"exec": [
											"data = {\r",
											"  \"fileSize\":\"177MB\",\r",
											"  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r",
											"  \"packageName\": \"Postman_apps_QA_new_updated\",\r",
											"  \"packageVersion\":\"1.2.1\",\r",
											"  \"releaseDate\": 15092020, \r",
											"  \"packageVersionCode\": 6\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd16f8ad-eca4-47c2-97c7-4fa52b59f95b",
										"exec": [
											"pm.test(\"status code to be 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"checkdata = pm.environment.get(\"updateddata\")\r",
											"console.log(checkdata.filesize)\r",
											"\r",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfasdfsafsafsaf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fileSize\":\"177MB\",\r\n  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r\n  \"packageName\": \"Postman_apps_QA_new_updated\",\r\n  \"packageVersion\": \"1.2.1\",\r\n  \"releaseDate\": 15092020\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get updated software package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b9ae858-9221-4c38-9c32-cf8c2e10acf5",
										"exec": [
											"pm.test(\"status to have 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var resp = pm.response.json();\r",
											"console.log(resp)\r",
											"\r",
											"var update = pm.environment.get(\"updateddata\")\r",
											"console.log(update.packageLocation)\r",
											"pm.test(\"checking the updated fields\", function(){\r",
											"    pm.expect(update.fileSize).to.equal(resp.fileSize);\r",
											"    pm.expect(update.packageLocation).to.equal(resp.packageLocation);\r",
											"    pm.expect(update.packageName).to.equal(resp.packageName);\r",
											"    pm.expect(update.packageVersion).to.equal(resp.packageVersion);\r",
											"    pm.expect(update.releaseDate).to.equal(resp.releaseDate);\r",
											"})\r",
											"\r",
											"pm.test(\"check for incorrect data \", function(){\r",
											"    pm.expect(update.fileSize).to.not.equal(\"1234\");\r",
											"    pm.expect(update.packageLocation).to.not.equal(\"new updated location\");\r",
											"    pm.expect(update.packageName).to.not.equal(\"updated name\");\r",
											"    pm.expect(update.packageVersion).to.not.equal(\"version_2\");\r",
											"    pm.expect(update.releaseDate).to.not.equal(123456);\r",
											"    pm.expect(update.packageVersionCode).to.not.equal(123);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update software package with invali id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ebb4c8b6-0d48-434a-aacf-73b93011ae51",
										"exec": [
											"pm.environment.set(\"message\",\"Software package with id:123547896 does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a168238-950b-41bd-b071-8c8cb09248b9",
										"exec": [
											"pm.test(\"status code to be 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"check message\", function(){\r",
											"    pm.expect(pm.environment.get(\"message\")).to.equal(data.message)\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfasfasfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"filesize\":\"177MB\",\r\n  \"packageLocation\":\"users/apps/new/postman.zip\",\r\n  \"packageName\": \"Postman_apps_QA_updated\",\r\n  \"packageVersion\": \"1.1.1\",\r\n  \"releaseDate\": 15092020, \r\n  \"packageVersionCode\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/123547896",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"123547896"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete softwre package id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd530329-5df0-43f5-af99-0a7be1079537",
										"exec": [
											"pm.test(\"status to have 200 OK\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No response body, hence only validation is 200 ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "aliusyflas",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete invalid softwre package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb5372d3-02f8-4de0-8016-e61c8d506cb1",
										"exec": [
											"pm.test(\"status to have 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"check message\", function(){\r",
											"    pm.expect(data[\"message\"]).to.deep.equal(\"Software package with id:123654789 does not exist\")\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "jkhdfa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/123654789",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"123654789"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Technician_Access",
					"item": [
						{
							"name": "get_software_packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd40c532-11b1-4734-acd0-20810f6114d3",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b3f9e5a-ec5b-4495-9dc8-f3ab83261cc7",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of available software packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d1b6671-11c4-4a7b-8991-7a9b2d32e1eb",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"available"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of eligible devices for software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5b9cee6-66dd-41c8-9a75-1940fba93711",
										"exec": [
											"pm.environment.set(\"SoftwarePackageid\", \"ea322203-c0f9-4b86-a772-b17c3f387c64\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c4d8e674-9da2-4f3d-98a5-15820e67cb37",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}/devices?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}",
										"devices"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list of eligible devices for Invalid software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3b51c1d-ca24-437b-bf98-c2fed13a8457",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f95c94c4-ff36-4536-9ddb-6a4ef89b8999",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/oeafhasodfuhwefajfh/devices?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"oeafhasodfuhwefajfh",
										"devices"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a softwre package ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8ad2782-b9c1-42a5-916e-95359ea818b4",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"pm.environment.set(\"SoftwarePackageid\",data.id)\r",
											"\r",
											"pm.test(\"responsebody validation\", function(){\r",
											"    pm.expect(data[\"packageName\"]).to.deep.equal(\"postman-test-package\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"This package is created by postman\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"postmans3\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"    pm.expect(data[\"fileSize\"]).to.deep.equal(\"600KB\")\r",
											"    pm.expect(data[\"targetFirmware\"]).to.deep.equal(\"24.09.2020-HF123\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "fdsgaskjfdasl",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true,\r\n  \"targetFirmware\": \"24.09.2020-HF123\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add duplicate software package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9672c85-2344-4955-a4e5-5164fc95f9d1",
										"exec": [
											"pm.test(\"status code is 409\",function(){\r",
											"    pm.response.to.have.status(409)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(409)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Conflict\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Software with package name:postman-test-package and version:1.0.1 already exists\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfjkahlkja",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true,\r\n  \"targetFirmware\": \"24.09.2020-HF123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add_software_package_without_imp_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59540171-0a03-457e-8e00-96c7ca81ae19",
										"exec": [
											"pm.test(\"status code is 400\",function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"var data = pm.response.json();\r",
											"\r",
											"pm.test(\"message check\", function(){\r",
											"    pm.expect(data.message).to.equal(pm.environment.get(\"message\"))\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(400)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d99ed74-4748-4873-9dcc-09d31955f23a",
										"exec": [
											"pm.environment.set(\"message\",\"target firmware missing\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "sgfsagasg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "get software package by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b281e00-2e81-427c-896f-ccb427f036b7",
										"exec": [
											"pm.test(\"staus code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get software package by incorrect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "018f0b3f-a2b6-43fc-9cb5-71ef75cd8d2b",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ec66515-a3a9-4990-b891-5be5023db8ca",
										"exec": [
											"pm.environment.set(\"message\",\"Software package with id:6b966578-823e-fb10b42b8fbd does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/6b966578-823e-fb10b42b8fbd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"6b966578-823e-fb10b42b8fbd"
									]
								}
							},
							"response": []
						},
						{
							"name": "update software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc37490e-72d5-4fe5-84bc-51f0a6a03a6c",
										"exec": [
											"data = {\r",
											"  \"fileSize\":\"177MB\",\r",
											"  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r",
											"  \"packageName\": \"Postman_apps_QA_new_updated\",\r",
											"  \"packageVersion\":\"1.2.1\",\r",
											"  \"releaseDate\": 15092020, \r",
											"  \"packageVersionCode\": 6\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2be96d6-e288-4c81-908c-743da710407e",
										"exec": [
											"pm.test(\"status code to be 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"checkdata = pm.environment.get(\"updateddata\")\r",
											"console.log(checkdata.filesize)\r",
											"\r",
											"\r",
											"// No response body so only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfasdfsafsafsaf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fileSize\":\"177MB\",\r\n  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r\n  \"packageName\": \"Postman_apps_QA_new_updated\",\r\n  \"packageVersion\": \"1.2.1\",\r\n  \"releaseDate\": 15092020\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update software package with invali id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5105e2de-2e6a-4a01-9f83-2c4d781e1cb6",
										"exec": [
											"pm.environment.set(\"message\",\"Software package with id:123547896 does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dff81da2-7c29-44c3-b91a-1201145bb944",
										"exec": [
											"pm.test(\"status code to be 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"check message\", function(){\r",
											"    pm.expect(pm.environment.get(\"message\")).to.equal(data.message)\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfasfasfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"filesize\":\"177MB\",\r\n  \"packageLocation\":\"users/apps/new/postman.zip\",\r\n  \"packageName\": \"Postman_apps_QA_updated\",\r\n  \"packageVersion\": \"1.1.1\",\r\n  \"releaseDate\": 15092020, \r\n  \"packageVersionCode\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/123547896",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"123547896"
									]
								}
							},
							"response": []
						},
						{
							"name": "get updated software package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce9026e6-f458-4167-bd53-5051090be8cd",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete softwre package id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c840a940-a45d-45ed-a03e-da3faccbc7bc",
										"exec": [
											"pm.test(\"status to have 200 OK\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// No response body so only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "aliusyflas",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete invalid softwre package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5e5d9e5-73ae-410d-ad50-765300aea8e5",
										"exec": [
											"pm.test(\"status to have 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"check message\", function(){\r",
											"    pm.expect(data[\"message\"]).to.deep.equal(\"Software package with id:123654789 does not exist\")\r",
											"    pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "jkhdfa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/123654789",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"123654789"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "get_software_packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03116150-fa89-4b10-b004-a5ba3926748c",
										"exec": [
											"pm.test(\"Respone Code to be 401\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfb6a8e2-927a-49c5-ab29-e81207e490c1",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a softwre package ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6414459f-2364-4ceb-9847-3ae3ed75b3e2",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"pm.environment.set(\"SoftwarePackageid\",data.id)\r",
											"\r",
											"pm.test(\"responsebody validation\", function(){\r",
											"    pm.expect(data[\"packageName\"]).to.deep.equal(\"postman-test-package\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"This package is created by postman\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"postmans3\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"    pm.expect(data[\"fileSize\"]).to.deep.equal(\"600KB\")\r",
											"    pm.expect(data[\"targetFirmware\"]).to.deep.equal(\"24.09.2020-HF123\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aedf6dd4-873d-4c6f-9bc0-91e479f16085",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"This package is created by postman\",\r\n  \"checkSum\": \"1qas23445edfg6678hhgt45edc33rddsew\",\r\n  \"fileSize\": \"600KB\",\r\n  \"operation\": \"install\",\r\n  \"packageLocation\": \"QA/postman\",\r\n  \"packageName\": \"postman-test-package\",\r\n  \"packageVersion\": \"1.0.1\",\r\n  \"releaseDate\": 1601492540,\r\n  \"s3BucketName\": \"postmans3\",\r\n  \"signatureLocation\": \"QA/postman.sign\",\r\n  \"systemPackage\": true,\r\n  \"targetFirmware\": \"24.09.2020-HF123\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages"
									]
								}
							},
							"response": []
						},
						{
							"name": "get software package by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c021f99-abd7-4f61-be64-ac98d88bd92c",
										"exec": [
											"pm.test(\"response code to be 401\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5023bf21-901d-4cc1-934f-e41cbdc84d59",
										"exec": [
											"data = {\r",
											"  \"fileSize\":\"177MB\",\r",
											"  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r",
											"  \"packageName\": \"Postman_apps_QA_new_updated\",\r",
											"  \"packageVersion\":\"1.2.1\",\r",
											"  \"releaseDate\": 15092020, \r",
											"  \"packageVersionCode\": 6\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2cd3fc97-c0a8-4ee9-ae38-a2d7ce630e77",
										"exec": [
											"pm.test(\"status code to be 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"checkdata = pm.environment.get(\"updateddata\")\r",
											"console.log(checkdata.filesize)\r",
											"\r",
											"\r",
											"// No response body so only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fileSize\":\"177MB\",\r\n  \"packageLocation\":\"users/QA/apps/new/postman.zip\",\r\n  \"packageName\": \"Postman_apps_QA_new_updated\",\r\n  \"packageVersion\": \"1.2.1\",\r\n  \"releaseDate\": 15092020\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete softwre package id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe467b4c-c5e7-43b6-b80c-aec590107bc6",
										"exec": [
											"pm.test(\"status to have 200 OK\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No respone body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad683856-be41-453a-ab2e-7fc46e99de51",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/private/softwarepackages/{{SoftwarePackageid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"softwarepackages",
										"{{SoftwarePackageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of available software packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd4309a4-bc1e-4c39-8ebf-d41dd2be4552",
										"exec": [
											"pm.test(\"Status code to be 401\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"available"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of eligible devices for software package",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "138a9b57-b8dc-43b6-a75f-d764ef4b0ca3",
										"exec": [
											"pm.environment.set(\"SoftwarePackageid\", \"ea322203-c0f9-4b86-a772-b17c3f387c64\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df2a796a-efe0-457f-9835-f8763dba845a",
										"exec": [
											"pm.test(\"Response code to be 401\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/softwarepackages/{{SoftwarePackageid}}/devices?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"softwarepackages",
										"{{SoftwarePackageid}}",
										"devices"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "firmware",
			"item": [
				{
					"name": "Clean_Up Firmware",
					"item": [
						{
							"name": "Delete_existing_firmware",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/private/firmwares/POSTMAN_V1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"POSTMAN_V1"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Admin_Access",
					"item": [
						{
							"name": "Return list of firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f3872ba-90ac-4ddf-87eb-f731aa5c9ccc",
										"exec": [
											"pm.test(\"status reposne is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// Not a paginated API so only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ebb8878-d91c-44ed-9837-12116628f406",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add new firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a048041-26d5-424a-9a24-f37bd8726e8e",
										"exec": [
											"pm.test(\"status code to be 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"version = data.firmwareVersion\r",
											"\r",
											"// pm.environment.set(\"FirmwareVersion\", version);\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(data[\"firmwareVersion\"]).to.deep.equal(\"POSTMAN_V1\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"firmware change logs for postman added firmware\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"S3bucket/postman\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "329cbe7e-4c64-4bf1-8dd9-54c761bdbfdc",
										"exec": [
											"pm.environment.set(\"FirmwareVersion\", \"POSTMAN_V1\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "retwergef",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman added firmware\",\r\n  \"releaseDate\": 29102020,\r\n  \"fileSize\": \"145MB\",\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add duplicate firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f8c072d-125d-4b17-b230-5d193312cff0",
										"exec": [
											"pm.test(\"status code to be 409\", function(){\r",
											"    pm.response.to.have.status(409)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:POSTMAN_V1 already exists\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Conflict\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(409)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "adsfasfdsafa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman firmware\",\r\n  \"releaseDate\": 16092020,\r\n  \"fileSize\": \"145MB\",\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add firmware with important fields missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7060f7c-f5dc-4d6c-b2fa-538b0a3f3d91",
										"exec": [
											"pm.test(\"status code to be 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"response body validtion\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"file size missing\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc79d541-82d6-4518-84cc-a8030084d4d9",
										"exec": [
											"pm.environment.set(\"message\",\"file size missing\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "yertdsfdsafas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman firmware\",\r\n  \"releaseDate\": 16092020,\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "get firmware details ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82382f79-2f12-431f-9230-a691af36b4f5",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json();\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(data[\"firmwareVersion\"]).to.deep.equal(\"POSTMAN_V1\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"firmware change logs for postman added firmware\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"S3bucket/postman\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get firmware details_invalid_version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6328a2d0-c27b-4544-a0fc-545a34f7d280",
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:new_firmware_invalid does not exist\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "437c2a43-3064-4de8-830e-346ea4238802",
										"exec": [
											"pm.environment.set(\"message\",\"Firmware with version:new_firmware_invalid does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/new_firmware_invalid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"new_firmware_invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "update firmware details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69651c84-cb09-4c6b-87d7-cabbd65eda20",
										"exec": [
											"data = {\r",
											"  \"changeLog\": \"this is postman updated\",  \r",
											"  \"checkSum\": \"123456\",\r",
											"  \"fileSize\": \"138MB\",\r",
											"  \"packageLocation\": \"QA/S3/postman\",\r",
											"  \"releaseDate\": 18092020,\r",
											"  \"s3BucketName\": \"AWS/s3Bucket\",\r",
											"  \"signatureLocation\": \"firmware_QA_sign\",\r",
											"  \"status\": \"done\"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "156f9c12-252c-405c-a236-5bb2d4f831c4",
										"exec": [
											"pm.test(\"status code to be 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// checkdata = pm.environment.get(\"updateddata\")\r",
											"// console.log(checkdata.filesize)\r",
											"\r",
											"// No respone body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dsfafda",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"this is postman updated\",  \r\n  \"checkSum\": \"123456\",\r\n  \"fileSize\": \"138MB\",\r\n  \"packageLocation\": \"QA/S3/postman\",\r\n  \"releaseDate\": 18092020,\r\n  \"s3BucketName\": \"AWS/s3Bucket\",\r\n  \"signatureLocation\": \"firmware_QA_sign\",\r\n  \"status\": \"done\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get updated firmware details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc204ed3-0a8c-4aaa-990e-796128e0d7b7",
										"exec": [
											"pm.test(\"status to have 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var resp = pm.response.json();\r",
											"console.log(resp)\r",
											"\r",
											"var update = pm.environment.get(\"updateddata\")\r",
											"\r",
											"\r",
											"pm.test(\"checking the updated fields\", function(){\r",
											"    pm.expect(update.changeLog).to.equal(resp.changeLog);\r",
											"    pm.expect(update.checkSum).to.equal(resp.checkSum);\r",
											"    pm.expect(update.fileSize).to.equal(resp.fileSize);\r",
											"    pm.expect(update.packageLocation).to.equal(resp.packageLocation);\r",
											"    pm.expect(update.releaseDate).to.equal(resp.releaseDate);\r",
											"    pm.expect(update.s3BucketName).to.equal(resp.s3BucketName);\r",
											"    pm.expect(update.signatureLocation).to.equal(resp.signatureLocation);\r",
											"    pm.expect(update.status).to.equal(resp.status);\r",
											"})\r",
											"\r",
											"pm.test(\"check for incorrect data \", function(){\r",
											"    pm.expect(update.changeLog).to.not.equal(\"not updated\");\r",
											"    pm.expect(update.checkSum).to.not.equal(\"no checksum\");\r",
											"    pm.expect(update.fileSize).to.not.equal(\"string\");\r",
											"    pm.expect(update.packageLocation).to.not.equal(\"string\");\r",
											"    pm.expect(update.releaseDate).to.not.equal(12345);\r",
											"    pm.expect(update.s3BucketName).to.not.equal(\"string\");\r",
											"    pm.expect(update.signatureLocation).to.not.equal(\"string\");\r",
											"    pm.expect(update.status).to.not.equal(\"string\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update firmware details for invalid version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c30164f6-5341-497e-9cc1-48f2c93be64e",
										"exec": [
											"data = {\r",
											"  \"changeLog\": \"this is postman updated\",  \r",
											"  \"checkSum\": \"123456\",\r",
											"  \"fileSize\": \"138MB\",\r",
											"  \"packageLocation\": \"QA/S3/postman\",\r",
											"  \"releaseDate\": 18092020,\r",
											"  \"s3BucketName\": \"AWS/s3Bucket\",\r",
											"  \"signatureLocation\": \"firmware_QA_sign\",\r",
											"  \"status\": \"done\"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "674c975f-8be0-4603-96c2-8c5eb180a16f",
										"exec": [
											"pm.test(\"status code to be 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:new_QA_firmware does not exist\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "idufyaifduaf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"this is postman updated\",  \r\n  \"checkSum\": \"123456\",\r\n  \"fileSize\": \"138MB\",\r\n  \"packageLocation\": \"QA/S3/postman\",\r\n  \"releaseDate\": 18092020,\r\n  \"s3BucketName\": \"AWS/s3Bucket\",\r\n  \"signatureLocation\": \"firmware_QA_sign\",\r\n  \"status\": \"done\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares/new_QA_firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"new_QA_firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37542eeb-1ea8-4f00-a143-c2366a8188d3",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No reponse body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dsfsafasdfsafdas",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleting invalid frimware version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d589a1bf-21b1-403b-8afe-3fd18ecc93b8",
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:{{Firmwfgdsgfdsgdsgds does not exist\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "oieaoiajfdsa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{Firmwfgdsgfdsgdsgds",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{Firmwfgdsgfdsgdsgds"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of all available firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5bca1d3-498d-476a-9fd8-769e52f1ed03",
										"exec": [
											"pm.test(\"status reposne is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// Not a paginated API only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"available"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Technician_Access",
					"item": [
						{
							"name": "Return list of firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95679453-e8a1-4c5a-8573-547ce091240e",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7421ec4b-b406-4e91-806b-d29201df5c95",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add new firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e134e95c-e1aa-4b85-a0e4-529d7d19cfa1",
										"exec": [
											"pm.test(\"status code to be 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"version = data.firmwareVersion\r",
											"\r",
											"pm.environment.set(\"FirmwareVersion\",version)\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(data[\"firmwareVersion\"]).to.deep.equal(\"POSTMAN_V1\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"firmware change logs for postman added firmware\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"S3bucket/postman\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dfasdfasfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman added firmware\",\r\n  \"releaseDate\": 29102020,\r\n  \"fileSize\": \"145MB\",\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add duplicate firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c36354c6-3527-4dd8-972a-a9f0c0552980",
										"exec": [
											"pm.test(\"status code to be 409\", function(){\r",
											"    pm.response.to.have.status(409)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:POSTMAN_V1 already exists\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Conflict\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(409)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "adsfasfdsafa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman firmware\",\r\n  \"releaseDate\": 16092020,\r\n  \"fileSize\": \"145MB\",\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add firmware with important fields missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78b1945e-28fe-4d95-a5c4-5bcb73055aa2",
										"exec": [
											"pm.test(\"status code to be 400\", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"response body validtion\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(400)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Bad Request\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"file size missing\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "abfd064e-b65c-4bbc-9d79-150041cb08e3",
										"exec": [
											"pm.environment.set(\"message\",\"file size missing\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "yertdsfdsafas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman firmware\",\r\n  \"releaseDate\": 16092020,\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "get firmware details ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19712a26-7706-4bc1-8520-b1386b03713d",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get firmware details_invalid_version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5a961ab-0b65-4174-8c38-e3ec03ff205f",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3683a47c-1d59-4b84-913d-ddc94c8ba239",
										"exec": [
											"pm.environment.set(\"message\",\"Firmware with version:new_firmware_invalid does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/new_firmware_invalid",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"new_firmware_invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "update firmware details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2febd383-123c-409a-ba8f-e7004fc1e4c7",
										"exec": [
											"data = {\r",
											"  \"changeLog\": \"this is postman updated\",  \r",
											"  \"checkSum\": \"123456\",\r",
											"  \"fileSize\": \"138MB\",\r",
											"  \"packageLocation\": \"QA/S3/postman\",\r",
											"  \"releaseDate\": 18092020,\r",
											"  \"s3BucketName\": \"AWS/s3Bucket\",\r",
											"  \"signatureLocation\": \"firmware_QA_sign\",\r",
											"  \"status\": \"done\"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "091db2c2-c5a1-461c-914e-0cc236573dfa",
										"exec": [
											"pm.test(\"status code to be \",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// checkdata = pm.environment.get(\"updateddata\")\r",
											"// console.log(checkdata.filesize)\r",
											"\r",
											"// No response body so only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dsfafda",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"this is postman updated\",  \r\n  \"checkSum\": \"123456\",\r\n  \"fileSize\": \"138MB\",\r\n  \"packageLocation\": \"QA/S3/postman\",\r\n  \"releaseDate\": 18092020,\r\n  \"s3BucketName\": \"AWS/s3Bucket\",\r\n  \"signatureLocation\": \"firmware_QA_sign\",\r\n  \"status\": \"done\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get updated firmware details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39ab0267-dc18-49ae-922e-50a7a2ebcdd7",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update firmware details for invalid version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d321d6d2-f013-4e7a-9a25-335aa16c5b3f",
										"exec": [
											"data = {\r",
											"  \"changeLog\": \"this is postman updated\",  \r",
											"  \"checkSum\": \"123456\",\r",
											"  \"fileSize\": \"138MB\",\r",
											"  \"packageLocation\": \"QA/S3/postman\",\r",
											"  \"releaseDate\": 18092020,\r",
											"  \"s3BucketName\": \"AWS/s3Bucket\",\r",
											"  \"signatureLocation\": \"firmware_QA_sign\",\r",
											"  \"status\": \"done\"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60f071dc-aa3e-4c98-8659-6c4ab743bc9a",
										"exec": [
											"pm.test(\"status code to be 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:new_QA_firmware does not exist\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "idufyaifduaf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"this is postman updated\",  \r\n  \"checkSum\": \"123456\",\r\n  \"fileSize\": \"138MB\",\r\n  \"packageLocation\": \"QA/S3/postman\",\r\n  \"releaseDate\": 18092020,\r\n  \"s3BucketName\": \"AWS/s3Bucket\",\r\n  \"signatureLocation\": \"firmware_QA_sign\",\r\n  \"status\": \"done\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares/new_QA_firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"new_QA_firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2672255f-692a-40ac-bf71-c94d79a04b8d",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// No respone body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "dsfsafasdfsafdas",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleting invalid frimware version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c259257b-05f2-48cd-8e9e-31105612a8e1",
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:POSTMAN_V1 does not exist\")\r",
											"pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "oieaoiajfdsa",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of all available firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6717540-f1aa-47f4-aeb2-f0911c604698",
										"exec": [
											"pm.test(\"status code to be 403\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"available"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "Return list of firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f4244d7-c686-4291-8aef-ee560f39b402",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6f1cd65-9831-4da5-be2a-8870b44f1300",
										"exec": [
											"pm.environment.set(\"message\",\"Authorization failed\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "add new firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "899190ce-ceeb-48dc-adf5-9999f64edf72",
										"exec": [
											"pm.test(\"status code to be 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"version = data.firmwareVersion\r",
											"\r",
											"pm.environment.set(\"FirmwareVersion\", version);\r",
											"\r",
											"pm.test(\"response body validation\",function(){\r",
											"    pm.expect(data[\"firmwareVersion\"]).to.deep.equal(\"POSTMAN_V1\")\r",
											"    pm.expect(data[\"changeLog\"]).to.deep.equal(\"firmware change logs for postman added firmware\")\r",
											"    pm.expect(data[\"s3BucketName\"]).to.deep.equal(\"S3bucket/postman\")\r",
											"    pm.expect(data[\"available\"]).to.deep.equal(true)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7d89c46-51a7-439e-9107-4a5e9f9416e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firmwareVersion\": \"POSTMAN_V1\",\r\n  \"checkSum\": \"122344566\",\r\n  \"packageLocation\": \"postman/firmware.zip\",\r\n  \"changeLog\": \"firmware change logs for postman added firmware\",\r\n  \"releaseDate\": 29102020,\r\n  \"fileSize\": \"145MB\",\r\n  \"signatureLocation\": \"postman_firmware.sign\",\r\n  \"s3BucketName\": \"S3bucket/postman\",\r\n  \"available\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares"
									]
								}
							},
							"response": []
						},
						{
							"name": "get firmware details ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1817f9dd-df50-407b-b0e5-728ebb45a284",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7ae3b557-6341-4087-b166-1e61c4b4adcd",
										"exec": [
											"pm.environment.set(\"message\",\"Authorization failed\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update firmware details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6855d373-0dcc-41dc-8035-85d8934e2cd2",
										"exec": [
											"data = {\r",
											"  \"changeLog\": \"this is postman updated\",  \r",
											"  \"checkSum\": \"123456\",\r",
											"  \"fileSize\": \"138MB\",\r",
											"  \"packageLocation\": \"QA/S3/postman\",\r",
											"  \"releaseDate\": 18092020,\r",
											"  \"s3BucketName\": \"AWS/s3Bucket\",\r",
											"  \"signatureLocation\": \"firmware_QA_sign\",\r",
											"  \"status\": \"done\"\r",
											"}\r",
											"\r",
											"pm.environment.set(\"updateddata\",data)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea784503-1eb1-40bf-b82a-53449f434cbe",
										"exec": [
											"pm.test(\"status code to be 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"//  No response body only validation is 200 OK\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"changeLog\": \"this is postman updated\",  \r\n  \"checkSum\": \"123456\",\r\n  \"fileSize\": \"138MB\",\r\n  \"packageLocation\": \"QA/S3/postman\",\r\n  \"releaseDate\": 18092020,\r\n  \"s3BucketName\": \"AWS/s3Bucket\",\r\n  \"signatureLocation\": \"firmware_QA_sign\",\r\n  \"status\": \"done\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11f55af1-0cc1-4b48-90d2-183b215c940f",
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No response body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c9652f2-68cb-4847-a918-feb9f93c17ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/private/firmwares/{{FirmwareVersion}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"private",
										"firmwares",
										"{{FirmwareVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list of all available firmware",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8d54f7b-6593-4479-b814-e6c408919457",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c776bf2-6ce9-4e31-aa1d-65eb4f800d9e",
										"exec": [
											"pm.environment.set(\"message\",\"Authorization failed\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/firmwares/available",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"firmwares",
										"available"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "Admin Access",
					"item": [
						{
							"name": "getdevices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efce64c8-ce40-4382-a109-94d0c1500223",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a995b6d-1f7d-4bf5-a48b-cca03673985b",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevicebyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53d85ebd-59c3-483c-90de-977685f627b2",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"check_for_device\",function(){\r",
											"     pm.expect(data[\"serial\"]).to.equal(pm.environment.get(\"deviceserial\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "904026d7-bb88-49e1-b22b-a5ad75386d34",
										"exec": [
											"pm.environment.set(\"deviceserial\",\"189ba5405bd4\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "incorrect_device_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df5f618-7fd7-4fe2-8884-4e1d06a6de3b",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"error message\",function(){\r",
											"     pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"     pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"     pm.expect(data[\"message\"]).to.deep.equal(\"Device with id:iudsfusahfd does not exist\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ded7dbef-7ab3-46dc-b1ba-54d475e72adb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/iudsfusahfd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"iudsfusahfd"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_device_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53abe058-b9ce-4bb1-be14-7f4be9904416",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// No response body only validation is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0a4ca9a-4cb9-410a-95da-50425c347491",
										"exec": [
											"var device_details = [{\r",
											"  \"location\": \"Hyderabad\",\r",
											"  \"locationZip\": \"5000020\",\r",
											"  \"alias\": \"Sandeep\",\r",
											"  \"customer\": \"Proterra\"\r",
											"  }]\r",
											"\r",
											"pm.environment.set(\"deviceinfo\",device_details);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"location\": \"Hyderabad\",\r\n  \"locationZip\": \"5000020\",\r\n  \"alias\": \"Sandeep\",\r\n  \"customer\": \"Proterra\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET_updated_Devicedetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1774f413-5093-4b2b-8a16-994e3fcd1a3f",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											" var data = pm.response.json()\r",
											"// console.log(data.dispensers[0].id)\r",
											"var device = pm.environment.get(\"deviceinfo\")\r",
											"// var dispenser = pm.environment.get(\"dispensers\")\r",
											"\r",
											"pm.test(\"parameters check\",function(){\r",
											"    pm.expect(data.location).to.equal(device[0].location);\r",
											"    pm.expect(data.locationZip).to.equal(device[0].locationZip);\r",
											"    pm.expect(data.alias).to.equal(device[0].alias)\r",
											"    pm.expect(data.customer).to.equal(device[0].customer)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "226554c7-0d84-48df-a536-45c95e0ca55c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad0b8887-1d9c-4f74-97b3-65bf5451ccdf",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"location name\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"location\")).to.deep.equal(data.content[i].location);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect location name\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"NewYork\").to.not.equal(data.content[i].location);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e18f26f0-15f8-486c-8d29-0a242624ba45",
										"exec": [
											"pm.environment.set(\"location\",\"Hyderabad\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=location&searchTerm=Hyderabad&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "location"
										},
										{
											"key": "searchTerm",
											"value": "Hyderabad"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_locationzip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35094e2-2bfa-463e-9228-9b990d943823",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"locationZip\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"locationZip\")).to.deep.equal(data.content[i].locationZip);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect locationZip\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"125478\").to.not.equal(data.content[i].locationZip);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfc635c4-8681-42d5-a6a8-fca8afbf7eb8",
										"exec": [
											"pm.environment.set(\"locationZip\",\"5000020\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=locationzip&searchTerm=5000020&sortDirection=ASC&sortKeys=serial&to=0\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "locationzip"
										},
										{
											"key": "searchTerm",
											"value": "5000020"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc0b1dcd-54ef-405f-9532-9859872efdc2",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"alias name \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"alias\")).to.deep.equal(data.content[i].alias);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect alias\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"new_test\").to.not.equal(data.content[i].alias);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eccbc9ee-e85c-4110-a843-c9c8fd5340d0",
										"exec": [
											"pm.environment.set(\"alias\",\"Sandeep\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=alias&searchTerm=Sandeep&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "alias"
										},
										{
											"key": "searchTerm",
											"value": "Sandeep"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_serial",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "852645ee-6ee8-4b00-8511-241947a093d6",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"serial \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"serial\")).to.deep.equal(data.content[i].serial);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect serial\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"123455678\").to.not.equal(data.content[i].serial);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4100f631-63e7-452a-83b8-5c0fd1fb22b9",
										"exec": [
											"pm.environment.set(\"serial\",\"189ba5405bd4\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=serial&searchTerm=bd4&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "serial"
										},
										{
											"key": "searchTerm",
											"value": "bd4"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd413b79-695a-444c-a319-b5b46b8dd66b",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"Customer \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"customer\")).to.deep.equal(data.content[i].customer);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect customer\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"Invalid\").to.not.equal(data.content[i].customer);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad5fa305-dddb-47ee-b064-ed21f69f5961",
										"exec": [
											"pm.environment.set(\"customer\",\"Proterra\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=customer&searchTerm=Proterra&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "customer"
										},
										{
											"key": "searchTerm",
											"value": "Proterra"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "defaultConfigs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92c6875d-9716-4521-bc2e-597b0e87c095",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"Configs body is not empty\",function(){\r",
											"    pm.expect(data.configs.length).not.null\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getConfigForDevice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76de320e-fae1-48e6-b312-15730b665291",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.configs.length)\r",
											"\r",
											"pm.test(\"Configs body is not empty\",function(){\r",
											"    pm.expect(data.configs.length).not.null\r",
											"})\r",
											"\r",
											"pm.test(\"response body\",function(){\r",
											"    pm.expect(data.serial).to.equal(pm.environment.get(\"deviceserial\"))\r",
											"    pm.response.to.have.jsonBody(\"lastModifiedBy\");\r",
											"    pm.response.to.have.jsonBody(\"lastModifiedDate\");\r",
											"    pm.response.to.have.jsonBody(\"status\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getConfigForInvalidSerial",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f41a678-37bf-4b97-a117-81c595471f0f",
										"exec": [
											"pm.test(\"Status code is 404\",function(){\r",
											"pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"error message\",function(){\r",
											"     pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"     pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"     pm.expect(data[\"message\"]).to.deep.equal(\"Configurations for device with id:adadf dooes not exist\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ece6009f-14bf-4ed7-911e-06aebd64b9eb",
										"exec": [
											"pm.environment.set( \"error\", \"Not Found\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/adadf/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"adadf",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_config_for_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43d17029-31fb-4753-89be-61c41309696c",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// No response body only validtion is 200 Ok\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50871bc4-b36c-4ebe-b7e8-81a08f7d43ad",
										"exec": [
											"var paramarray = [\r",
											"{\r",
											"    \"strValue\": \"2,3,4,1\",\r",
											"    \"name\": \"charge_seq\"\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_bulk_soc\",\r",
											"    \"intValue\": 75,\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_top_soc\",\r",
											"    \"intValue\": 99,\r",
											"  \r",
											"}]\r",
											"\r",
											"pm.environment.set(\"configurations\",paramarray)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configuration\": {\r\n    \"configs\": [\r\n       {\r\n        \"strValue\": \"2,3,4,1\",\r\n        \"name\": \"charge_seq\"\r\n      },\r\n      {\r\n        \"intValue\": 75,\r\n        \"name\": \"d1_bulk_soc\"\r\n      },\r\n      {\r\n        \"intValue\": 99,\r\n        \"name\": \"d1_top_soc\"\r\n      }\r\n    ]\r\n  },\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_config_for_Invalid_DeviceId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b7e7c4f-25c8-4064-bcdc-7a3a66ec51fb",
										"exec": [
											"pm.test(\"Status code is 404\",function(){\r",
											"pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"error message\",function(){\r",
											"     pm.expect(data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"     pm.expect(data[\"status\"]).to.deep.equal(404)\r",
											"     pm.expect(data[\"message\"]).to.deep.equal(\"Device with serial:dafasfasfd does not exist\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2be8d219-d5d1-4a67-a76a-2342c1b3e1a9",
										"exec": [
											"pm.environment.set(\"message\",\"Device with serial:dafasfasfd does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configuration\": {\r\n    \"configs\": [\r\n       {\r\n        \"strValue\": \"2,3,4,1\",\r\n        \"name\": \"charge_seq\"\r\n      },\r\n      {\r\n        \"intValue\": 75,\r\n        \"name\": \"d1_bulk_soc\"\r\n      },\r\n      {\r\n        \"intValue\": 99,\r\n        \"name\": \"d1_top_soc\"\r\n      }\r\n    ]\r\n  },\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"dafasfasfd\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET firmware update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f31a3e91-90cc-4811-8a65-7178d5eaa0eb",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(100)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7dd586fa-803b-4c6c-a9fa-37d08b3d4693",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/firmware?pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"firmware"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET firmware update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4a60d07-c82d-480e-ab11-a3620061332d",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(100)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69218e06-afce-4335-86b5-542220df1eeb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/1243522345/history/firmware?pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"1243522345",
										"history",
										"firmware"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET software update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f6036ee-c7cf-4193-9bc1-760267690f81",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64a5c96c-fd6d-4dc8-9af5-974109704660",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/software?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"software"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET software update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d03dbd9-43b4-4c60-80f3-7cd5fb3d63f8",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27d5264c-0de2-4fc8-9777-f33ed28eb1be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/ouefohfsufh/history/software?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"ouefohfsufh",
										"history",
										"software"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET config update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f8b6917-7b7c-43e8-bc19-f3228c818e29",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bed05492-6fd2-4229-a8af-635eb090f139",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/configuration?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"configuration"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET config update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd51034-6454-485e-98ee-73875ab839be",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9928819-f0a5-42b6-9db8-421135608f4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/dasfasfsa/history/configuration?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"dasfasfsa",
										"history",
										"configuration"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_Unassigned_devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "908d3069-34ed-41e7-803f-9a92d5e376d7",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/unassigned?from=0&pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"unassigned"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "reboot device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "27c9a7dc-d554-407f-aea2-0944ac110eb8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3dc215b0-fba3-4bec-bfb4-cecc650eafc1",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"   if (pm.response.status == 200){\r",
											"       pm.response.to.have.status(200)\r",
											"   }\r",
											"   else {\r",
											"       pm.response.to.have.status(404)\r",
											"   }\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:189ba5405bd4 is offline\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/reboot",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"reboot"
									]
								}
							},
							"response": []
						},
						{
							"name": "reboot invalid deviceId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62179971-1e39-470c-b741-2dad063833de",
										"exec": [
											"pm.environment.set(\"message\", \"Device with serial:restdr does not exist\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "942b8038-4bca-4179-a40e-75c7ebcef1c1",
										"exec": [
											"pm.test(\"status code to be 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:restdr does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/restdr/reboot",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"restdr",
										"reboot"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a614194-a5db-49a0-ba8a-00754799bccd",
										"exec": [
											"pm.environment.set(\"resultDescription\",\"Update successfully pushed\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b595198-bb21-46b7-a797-cec9b76700f1",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"message check\", function(){\r",
											"    pm.expect(data[0].resultDescription).to.equal(pm.environment.get(\"resultDescription\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v30.10.2020-HF123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "get jobid for Firmware update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c74a83cc-5bef-4475-9034-ccb810230311",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"var jobid = data.firmwareUpdateRequest.jobId\r",
											"\r",
											"console.log(jobid)\r",
											"pm.environment.set(\"Firmwarejobid\",jobid)\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d13cc04f-bf59-4c56-a8a2-1eed7d10a7f8",
										"exec": [
											"pm.environment.set(\"tenantId\", \"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  firmware update on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1973c6f9-6a65-429e-b165-b5b8e0faa564",
										"exec": [
											"pm.test(\"status to have 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"// No response body so only validation is 200 OK\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/firmwares/pending/{{Firmwarejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"firmwares",
										"pending",
										"{{Firmwarejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on  invalid device id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d69b423-0c71-4793-b20b-6dd3f5866c07",
										"exec": [
											"pm.environment.set(\"message\",\"Device with serial:dsafdafdsaf does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b2dcbd0-7440-4ff2-a1dd-df6134b36a8f",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:dsafdafdsaf does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"dsafdafdsaf\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v21.10.2020-HF123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on  invalid firmware version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b966080-82dd-4dd4-a2b3-1e9d6ef1501c",
										"exec": [
											"pm.environment.set(\"message\", \"Firmware with version:v11.09 does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed9551a5-a1f7-4600-92ff-6929ec9a62a2",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:v11.09 does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v11.09\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on  invalid firmware_invalid_serial",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7030493-2b2b-4766-bfb8-01d99143b9f3",
										"exec": [
											"pm.environment.set(\"message\", \"Firmware with version:v11.09 does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "628d3948-522f-4425-acda-619b1cf4db1c",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Firmware with version:v11.09 does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"7032rrwe378078\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v11.09\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending firmware request_invalid_device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cdc8a4d1-a103-46a4-a334-128c340143b7",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:57E6068EAE79A does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9f095bf-a619-4cd9-98b7-7a2f05b9d0a2",
										"exec": [
											"pm.test(\"invalid device\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var data = pm.response.json();\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:57E6068EAE79A does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/57E6068EAE79A/firmwares/pending/{{Firmwarejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"57E6068EAE79A",
										"firmwares",
										"pending",
										"{{Firmwarejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending firmware request_invalid_job and invalid serial",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ceb6b006-b30e-4dc0-bc58-410d37a0b992",
										"exec": [
											"pm.environment.set(\"message\",\"Device with serial:5405bd4 does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d4cfaae-e9b9-416e-b9fb-ea3868361a98",
										"exec": [
											"pm.test(\"invalid job id\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:5405bd4 does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/5405bd4/firmwares/pending/324213rqwr234r23q3r2q",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"5405bd4",
										"firmwares",
										"pending",
										"324213rqwr234r23q3r2q"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending firmware request_invalid_job",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad8bd616-3a67-41b1-9fa3-027fcbd0dfc7",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:189ba5405bd4 does not have any pending firmware request\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d12a1d61-9a0c-4f62-99c1-232989c08aaa",
										"exec": [
											"pm.test(\"invalid job id\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:189ba5405bd4 does not have any pending firmware request\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/firmwares/pending/324213rqwr234r23q3r2q",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"firmwares",
										"pending",
										"324213rqwr234r23q3r2q"
									]
								}
							},
							"response": []
						},
						{
							"name": "Software_update_on_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18cf2151-4e48-45b3-8029-930cc5d004e9",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"pm.test(\"message check\", function(){\r",
											"    pm.expect(data[0].resultDescription).to.equal(pm.environment.get(\"resultDescription\"))\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbe7dc9e-ede1-4d6c-a17d-1192a4d293eb",
										"exec": [
											"pm.environment.set(\"resultDescription\",\"Update successfully pushed\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ],\r\n  \"force\": true,\r\n  \"restart\": true,\r\n  \"softwarePackageId\": \"2ff3ba76-81dc-44ad-a881-8b298dfce8ec\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job id for software update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89c1ef32-fd3a-4392-9c0d-162f4610c2ee",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.apps[1].jobId)\r",
											"\r",
											"var jobid = data.apps[1].jobId\r",
											"\r",
											"pm.environment.set(\"Softwarepackagejobid\",jobid)\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c516ade-9875-4843-a2e5-04c23fbec68a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete pending Software update on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9b99956e-3d9f-4885-91c2-660ab7945bb9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3cbf86d-c582-437d-954c-64b6bb2619d8",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"\r",
											"// No respones body only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/softwarepackages/pending/{{Softwarepackagejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"softwarepackages",
										"pending",
										"{{Softwarepackagejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Software_update_on_Invalid-device_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7af0b435-42b1-4d63-9afe-cf56af3d85c6",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:edrftioo099887 does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c93f3666-77ea-45c2-9219-d6c032321a37",
										"exec": [
											"pm.environment.set(\"message\",\"Device with serial:edrftioo099887 does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"edrftioo099887\"\r\n    }\r\n  ],\r\n  \"force\": true,\r\n  \"restart\": true,\r\n  \"softwarePackageId\": \"222b4e78-337c-430f-9b6a-a596e4cdb7b8\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Software_update_invalid_softwareid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21dca3a1-c186-4169-b646-166bc73d2292",
										"exec": [
											"pm.environment.set(\"message\", \"Software package with id:428a-dfda70c0361f does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "249a7c40-d359-4087-a7db-4cf3a16437b3",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Software package with id:428a-dfda70c0361f does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bcc\"\r\n    }\r\n  ],\r\n  \"force\": true,\r\n  \"restart\": true,\r\n  \"softwarePackageId\": \"428a-dfda70c0361f\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete pending Software update on device with invalid job id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94bbb5eb-450a-428c-afea-9e4f070d649c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ada07b3-e36b-440c-8c6e-f2f69367771f",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"\r",
											"// No response body only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/softwarepackages/pending/dsafsafsafsafdsda",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"softwarepackages",
										"pending",
										"dsafsafsafsafdsda"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_software_package_on_device_invalid_device_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8136377-60cc-42b2-883b-0a03f9a7cb56",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:1895bcc does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7625cee4-a054-4988-8c5a-40c981c4ed2c",
										"exec": [
											"pm.environment.set(\"message\",\"Device with serial:1895bcc does not exist\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"1895bcc\"\r\n    }\r\n  ],\r\n  \"softwarePackageId\": \"84ce840a-1389-43ee-bf74-223c4d29d44f\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return_ListOf_AvailableCerts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc222a14-81ff-468c-98ba-8233e7cc45c8",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"var response = pm.response.json()\r",
											"\r",
											"//console.log(response[0].certificateId)\r",
											"\r",
											"var certificate = response[0].certificateId\r",
											"\r",
											"pm.environment.set(\"certificateId\",certificate)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/certificates/unassigned",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"certificates",
										"unassigned"
									]
								}
							},
							"response": []
						},
						{
							"name": "update cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a2fd7e2-32aa-4010-b6a9-58235ed585ed",
										"exec": [
											"pm.test(\"status to have 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No respone only validation is 200 Ok\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a573d5a0-cd37-46dc-823a-bc4d848d70dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get jobid for certificate update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32459425-be7a-41ff-8d12-d6f9224041bc",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"\r",
											"var jobid = data.certificateUpdateRequest.jobId\r",
											"pm.environment.set(\"Certificatejobid\",jobid)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09206679-91f0-4b8f-aaa7-b348e6a4a9e7",
										"exec": [
											"pm.test(\"status to have 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"\r",
											"// No response only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/pending/{{Certificatejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"pending",
										"{{Certificatejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_invalid_certs_on_device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "038c77f0-3972-4e2a-b710-7e5137bf1ace",
										"exec": [
											"pm.environment.set( \"message\",\"Certificate with id:djalkfhsfdlkjsahflkjsaffdsadfsagsag does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e8cd089b-7d98-4bf6-a254-4cf0d7dee714",
										"exec": [
											"pm.test(\"invalid cert\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Certificate with id:djalkfhsfdlkjsahflkjsaffdsadfsagsag does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/djalkfhsfdlkjsahflkjsaffdsadfsagsag",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"djalkfhsfdlkjsahflkjsaffdsadfsagsag"
									]
								}
							},
							"response": []
						},
						{
							"name": "update certificates on invalid_device_invalid_cert",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54a60399-faab-4a34-9645-ada08531d63a",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:123455yafashfla does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1b23223-d5ce-4ff5-be81-51dca6db1a04",
										"exec": [
											"pm.test(\"invalid cert\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:123455yafashfla does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/123455yafashfla/certificate/fdstwarea",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"123455yafashfla",
										"certificate",
										"fdstwarea"
									]
								}
							},
							"response": []
						},
						{
							"name": "update valid certs on invalid device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3cf33cb3-4189-408a-afd0-8098aceba6ba",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:123455yafashfla does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c0c664f-8ad9-439d-a50e-d9aa4d39b2fb",
										"exec": [
											"pm.test(\"invalid cert\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:123455yafashfla does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/123455yafashfla/certificate/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"123455yafashfla",
										"certificate",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete Certificate request_invalid_job and invalid serial",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0ddd4566-889e-40ff-9d86-c482f528f204",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:sdfasfdasfsa does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cfff3a3f-9ec6-425f-bc73-28bc11b6d848",
										"exec": [
											"pm.test(\"invalid devices\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:sdfasfdasfsa does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/sdfasfdasfsa/certificate/pending/uyihgiuguyvg",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"sdfasfdasfsa",
										"certificate",
										"pending",
										"uyihgiuguyvg"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete Certificate request_invalid_device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5fc70425-31ff-4026-a85a-dd4ec7c55ba1",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:dsafsadfsaf does not exist\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "40ffde53-4cf4-433b-ac07-90f8474fb253",
										"exec": [
											"pm.test(\"invalid devices\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:dsafsadfsaf does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/dsafsadfsaf/certificate/pending/{{Certificatejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"dsafsadfsaf",
										"certificate",
										"pending",
										"{{Certificatejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete Certificate request_invalid_job",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4ac6e858-4bb3-468a-a7de-4bc356e87d39",
										"exec": [
											"pm.environment.set( \"message\",\"Device with serial:189ba5405bd4 does not have any pending certificate request\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c545e796-caf4-406b-8758-c79c9af3d4df",
										"exec": [
											"pm.test(\"invalid devices\",function(){\r",
											"    pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/{{tenantId}}/devices/{{deviceserial}}/certificate/pending/dsafsadfdsa",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"pending",
										"dsafsadfdsa"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tech Access",
					"item": [
						{
							"name": "getdevices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46c2d55a-b1ac-4a57-9315-982550318d50",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7decaf6-7490-4880-a18d-5d10cd8f6d35",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevicebyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05d76111-a417-44ac-aeb1-421d264c1345",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"check_for_device\",function(){\r",
											"     pm.expect(data[\"serial\"]).to.equal(pm.environment.get(\"deviceserial\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a744c5eb-753f-4868-ac24-aadc864d5d6b",
										"exec": [
											"pm.environment.set(\"deviceserial\",\"189ba5405bd4\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "incorrect_device_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23fc214-4803-43f2-8ed1-1e71bff52560",
										"exec": [
											"pm.test(\"status code is 404\",function(){\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with id:iudsfusahfd does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71121dec-4f9b-45af-8b32-d3e137fa3d92",
										"exec": [
											"pm.environment.set( \"error\",\"Not Found\",)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/iudsfusahfd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"iudsfusahfd"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_device_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b002d2a8-ba8b-48e1-a63d-62412b27445b",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											" \r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "254d25ad-f988-4100-9464-ec1fd2299267",
										"exec": [
											"var device_details = [{\r",
											"  \"location\": \"Hyderabad\",\r",
											"  \"locationZip\": \"5000020\",\r",
											"  \"alias\": \"Sandeep\",\r",
											"  \"customer\": \"Proterra\"\r",
											"  }]\r",
											"\r",
											"pm.environment.set(\"deviceinfo\",device_details);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{tech_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"location\": \"Hyderabad\",\r\n  \"locationZip\": \"5000020\",\r\n  \"alias\": \"Sandeep\",\r\n  \"customer\": \"Proterra\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0087377d-1b07-4089-81ae-e201b207c647",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"location name\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"location\")).to.deep.equal(data.content[i].location);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect location name\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"NewYork\").to.not.equal(data.content[i].location);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cff4de60-b52c-4da4-8452-4bbd904a1fda",
										"exec": [
											"pm.environment.set(\"location\",\"Hyderabad\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=location&searchTerm=Hyderabad&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "location"
										},
										{
											"key": "searchTerm",
											"value": "Hyderabad"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_locationzip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eb59ec9-250b-4615-aa08-d2e638d8291d",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"locationZip\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"locationZip\")).to.deep.equal(data.content[i].locationZip);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect locationZip\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"125478\").to.not.equal(data.content[i].locationZip);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4cb2e577-ffef-4580-8ce3-1bd7a7bd0404",
										"exec": [
											"pm.environment.set(\"locationZip\",\"5000020\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=locationzip&searchTerm=5000020&sortDirection=ASC&sortKeys=serial&to=0\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "locationzip"
										},
										{
											"key": "searchTerm",
											"value": "5000020"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "316cc307-7c24-4d91-b92d-ef5e81ed07a7",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"alias name \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"alias\")).to.deep.equal(data.content[i].alias);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect alias\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"new_test\").to.not.equal(data.content[i].alias);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a97ab1ca-ea0f-4713-ab39-14a15cde6287",
										"exec": [
											"pm.environment.set(\"alias\",\"Sandeep\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=alias&searchTerm=Sandeep&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "alias"
										},
										{
											"key": "searchTerm",
											"value": "Sandeep"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_serial",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e2c3c20-e3be-4d05-8af6-ade33f935b50",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"serial \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"serial\")).to.deep.equal(data.content[i].serial);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect serial\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"123455678\").to.not.equal(data.content[i].serial);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e377e554-67aa-4489-b5fe-f11d65697f0f",
										"exec": [
											"pm.environment.set(\"serial\",\"189ba5405bcc\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=serial&searchTerm=bcc&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "serial"
										},
										{
											"key": "searchTerm",
											"value": "bcc"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevices_by_customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e40dae7c-46d7-4f91-baa3-222ac93b6995",
										"exec": [
											"pm.test(\"response to be 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.numberOfElements)\r",
											"\r",
											"pm.test(\"Customer \",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(pm.environment.get(\"customer\")).to.deep.equal(data.content[i].customer);\r",
											"    }\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"incorrect customer\",function(){\r",
											"    for(var i=0;i<data.numberOfElements;i++){\r",
											"        pm.expect(\"Invalid\").to.not.equal(data.content[i].customer);\r",
											"    }\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8dd97295-61af-4476-815a-c3dc0516d9c8",
										"exec": [
											"pm.environment.set(\"customer\",\"Proterra\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&search=customer&searchTerm=Proterra&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "search",
											"value": "customer"
										},
										{
											"key": "searchTerm",
											"value": "Proterra"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "defaultConfigs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b8f50cb-b1bf-49af-8e1b-b09b7ea3938f",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data)\r",
											"\r",
											"pm.test(\"Configs body is not empty\",function(){\r",
											"    pm.expect(data.configs.length).not.null\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getConfigForDevice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b4d3672-b944-412d-98d7-0983576dcf92",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = pm.response.json()\r",
											"console.log(data.configs.length)\r",
											"\r",
											"pm.test(\"Configs body is not empty\",function(){\r",
											"    pm.expect(data.configs.length).not.null\r",
											"})\r",
											"\r",
											"pm.test(\"response body\",function(){\r",
											"    pm.expect(data.serial).to.equal(pm.environment.get(\"deviceserial\"))\r",
											"    pm.response.to.have.jsonBody(\"lastModifiedBy\");\r",
											"    pm.response.to.have.jsonBody(\"lastModifiedDate\");\r",
											"    pm.response.to.have.jsonBody(\"status\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "getConfigForInvalidSerial",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a372c3b6-37e9-4d6b-9e5f-9c6cd74840cf",
										"exec": [
											"pm.test(\"Status code is 404\",function(){\r",
											"pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Configurations for device with id:adadf dooes not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b04344f7-dbcb-49d5-aa08-55db25440a6c",
										"exec": [
											"pm.environment.set( \"error\", \"Not Found\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/adadf/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"adadf",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_Basicconfig_for_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b88e68c-a45c-47a6-8e00-10b124a846d6",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// No response body only validation is 200 OK"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c907db-3cd6-4962-894b-28029d85c3b4",
										"exec": [
											"var paramarray = [\r",
											"{\r",
											"    \"strValue\": \"2,3,4,1\",\r",
											"    \"name\": \"charge_seq\"\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_bulk_soc\",\r",
											"    \"intValue\": 75,\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_top_soc\",\r",
											"    \"intValue\": 99,\r",
											"  \r",
											"}]\r",
											"\r",
											"pm.environment.set(\"configurations\",paramarray)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configuration\": {\r\n    \"configs\": [\r\n       {\r\n        \"strValue\": \"2,3,4,1\",\r\n        \"name\": \"charge_seq\"\r\n      },\r\n      {\r\n        \"intValue\": 75,\r\n        \"name\": \"d1_bulk_soc\"\r\n      },\r\n      {\r\n        \"intValue\": 99,\r\n        \"name\": \"d1_top_soc\"\r\n      }\r\n    ]\r\n  },\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_advance_Config_ForDevice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09fbb732-e04c-4f8c-8226-e65da8d09507",
										"exec": [
											"pm.test(\"Status code is 200\",function(){\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											" \r",
											"// No validation only response is 200 Ok"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44b0892b-4a18-447a-b2be-bab3ae575f94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configuration\": {\r\n    \"configs\": [\r\n       {\r\n            \"name\": \"log_period_min\",\r\n            \"intValue\": 1,\r\n            \"advanceParam\": true\r\n        },\r\n        {\r\n            \"name\": \"sp_heartbeat_sec\",\r\n            \"intValue\": 180,\r\n            \"advanceParam\": true\r\n        },\r\n        {\r\n            \"name\": \"log_duration_on_disk_min\",\r\n            \"intValue\": 15,\r\n            \"advanceParam\": true\r\n        }\r\n    ]\r\n  },\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET firmware update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e65e8a0f-151f-4326-8d55-6a0080ffec71",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(100)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25d762ad-64a8-4ac1-979b-18a861bb466f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/firmware?pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"firmware"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET firmware update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3649b55-d24a-4906-92cf-e522c129a212",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(100)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "375e73f4-e91b-4124-a7fb-c80d6c1b2766",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/1243522345/history/firmware?pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"1243522345",
										"history",
										"firmware"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET software update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "778d1e7b-a6e7-4f01-9189-e346f926b666",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3fa369d-7df0-4d35-b3d5-f8b65fba5e4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/software?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"software"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET software update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bea62289-1702-46e4-adcb-aca86e43b5ee",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65265e71-fbb4-416d-add0-168387df07f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/ouefohfsufh/history/software?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"ouefohfsufh",
										"history",
										"software"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET config update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "003d8da8-14fe-4d6c-aa16-9d68be335d1f",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8a86f7e-9104-4787-a803-263cd672cd72",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/configuration?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"configuration"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET config update history for invalid device id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42b95a45-1451-4195-880b-8b8558da1feb",
										"exec": [
											"pm.test(\"status code is 200\",function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data)\r",
											"\r",
											"pm.test(\"Response_validation\",function(){\r",
											"pm.response.to.have.jsonBody(\"content\")\r",
											"pm.expect(response_data[\"numberOfElements\"]).not.equals(null)\r",
											"pm.expect(response_data[\"size\"]).equals(10)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bfff1f7-71c6-4fb8-bef9-ae0ca3212e75",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/dasfasfsa/history/configuration?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"dasfasfsa",
										"history",
										"configuration"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_Unassigned_devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e79a7bb5-573d-410e-8f45-29ada9964037",
										"exec": [
											"pm.test(\"response to have 403\",function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/unassigned?from=0&pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"unassigned"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "reboot device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a256d83-9da7-4c84-94b2-a605b7b4c369",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c45d99c9-40de-4057-86f7-bfbd9a4a3e5d",
										"exec": [
											"pm.test(\"response to have 200\",function(){\r",
											"   if (pm.response.status == 200){\r",
											"       pm.response.to.have.status(200)\r",
											"   }\r",
											"   else {\r",
											"       pm.response.to.have.status(404)\r",
											"   }\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:189ba5405bd4 is offline\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/reboot",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"reboot"
									]
								}
							},
							"response": []
						},
						{
							"name": "reboot invalid deviceId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "725055f2-ed00-4b61-a0fe-62e35de8b893",
										"exec": [
											"pm.environment.set(\"message\", \"Device with serial:restdr does not exist\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4dc6583-4429-486f-80d0-291a1d22ef25",
										"exec": [
											"pm.test(\"status code to be 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})\r",
											"\r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Response_body validation\",function(){\r",
											"    pm.expect(response_data[\"status\"]).to.deep.equal(404)\r",
											"    pm.expect(response_data[\"error\"]).to.deep.equal(\"Not Found\")\r",
											"    pm.expect(response_data[\"message\"]).to.deep.equal(\"Device with serial:restdr does not exist\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{admin_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/restdr/reboot",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"restdr",
										"reboot"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1437cf22-5d04-461f-9a65-adff2cbbb26e",
										"exec": [
											"pm.environment.set(\"resultDescription\",\"Update successfully pushed\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1596e283-302a-439a-bc25-6c2bc0a84d2c",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v21.10.2020-HF123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  firmware update on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06c9afe9-e0de-41a4-a33b-ccd93cd7b525",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/firmwares/pending/{{Firmwarejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"firmwares",
										"pending",
										"{{Firmwarejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5824c802-ab94-4159-9e9a-46ab0db402e3",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dae9bdae-1191-4e20-a364-ef8f241a29d4",
										"exec": [
											"pm.environment.set(\"certificateId\",\"b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8548b1f-2f2f-43dc-987d-cdd75989e2c5",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/pending/{{Certificatejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"pending",
										"{{Certificatejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Software_update_on_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fe90888-0e62-4038-aa7f-623f48ff3710",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bd4\"\r\n    }\r\n  ],\r\n  \"force\": true,\r\n  \"restart\": true,\r\n  \"softwarePackageId\": \"ea322203-c0f9-4b86-a772-b17c3f387c64\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete pending software job on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57a0ee0a-b36e-4ea6-a332-7e8e268e6885",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "738f9a53-5125-49a3-8c7f-00bcbb9f6939",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(403);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json()\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"FORBIDDEN\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tech_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/softwarepackages/pending/{{Softwarepackagejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"softwarepackages",
										"pending",
										"{{Softwarepackagejobid}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "getdevices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e33144f-c5c1-4f10-af27-dfb5738ae782",
										"exec": [
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ace71ee2-12f6-43ac-b8a8-638f1053d5d8",
										"exec": [
											"pm.environment.set(\"tenantId\",\"2cbbfd0a-0ff7-4062-89da-bf2fa63807b7\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices?from=0&pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial&to=0\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getdevicebyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01bdc040-a789-4bf5-8ab4-721813abbfd0",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3650dfba-0a41-4245-8a45-8e5ba1ebe49f",
										"exec": [
											"pm.environment.set(\"deviceserial\",\"189ba5405bcc\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "461c0da0-92ec-4f27-bd0c-54dafe9ff2bb",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47333460-c87e-4df4-8f81-9a4b68353450",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"location\": \"Hyderabad\",\r\n  \"locationZip\": \"5000020\",\r\n  \"alias\": \"Sourav\",\r\n  \"group\":\"QA_devices\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getConfigForDevice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34401c88-afee-4a4f-881c-46d1ba69cbf8",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_config_for_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cf01a99-229b-468c-a492-5270c2a218c9",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "910ee418-cf2c-49cf-ac3f-27b85400ff0f",
										"exec": [
											"var paramarray = [\r",
											"{\r",
											"    \"strValue\": \"3,4,2,1\",\r",
											"    \"name\": \"charge_seq\"\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_bulk_soc\",\r",
											"    \"intValue\": 77,\r",
											"},\r",
											"{\r",
											"    \"name\": \"d1_top_soc\",\r",
											"    \"intValue\": 99,\r",
											"  \r",
											"}]\r",
											"\r",
											"pm.environment.set(\"configurations\",paramarray)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"configuration\": {\r\n    \"configs\": [\r\n       {\r\n        \"strValue\": \"4,3,2,1\",\r\n        \"name\": \"charge_seq\"\r\n      },\r\n      {\r\n        \"intValue\": 77,\r\n        \"name\": \"d1_bulk_soc\"\r\n      },\r\n      {\r\n        \"intValue\": 99,\r\n        \"name\": \"d1_top_soc\"\r\n      }\r\n    ]\r\n  },\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bcc\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "defaultConfigs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82f8b06a-e853-4ae3-ba46-14bbd19e27df",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/configurations",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET config update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0261cefd-7f55-4673-bf56-ba40d62393e6",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4cbb3b34-37bc-414a-b558-a1a8e4eb38fc",
										"exec": [
											"pm.environment.set(\"deviceserial\",\"189ba5405bcc\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/configuration?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"configuration"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET firmware update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59ebdff3-69b1-4d3c-a7ac-a0bfa71ffa82",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf194b2a-ff56-4ad5-97bd-83ead3bec908",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/firmware?pageIndex=0&pageSize=100&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"firmware"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "100"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET software update history for device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51237159-4a15-4fed-b6c9-c309f1534e76",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1b5c090-a6e6-4611-bc22-e504a846b68c",
										"exec": [
											"pm.environment.set(\"deviceSerial\",\"189ba5405bcc\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/history/software?pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"history",
										"software"
									],
									"query": [
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_Unassigned_devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b05e47ab-c881-40c8-9533-0b9fdb61f684",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/unassigned?from=0&pageIndex=0&pageSize=10&sortDirection=ASC&sortKeys=serial&to=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"unassigned"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "pageIndex",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										},
										{
											"key": "sortDirection",
											"value": "ASC"
										},
										{
											"key": "sortKeys",
											"value": "serial"
										},
										{
											"key": "to",
											"value": "0"
										},
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "reboot device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f4f367c-e06b-483b-977c-4fb0ec10af89",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2d4e6f3-7ad0-4c57-afcd-cf48a81731eb",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/reboot",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"reboot"
									]
								}
							},
							"response": []
						},
						{
							"name": "update cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2416859-dd8f-4c7b-96e0-faa5d9974496",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a7e3872-fd4e-496e-a641-5685df7406cd",
										"exec": [
											"pm.environment.set(\"certificateId\",\"b4903ea3f949aceb403e282023ecafa6b1292ca2d578baead4d7acf3762fa42e\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/{{certificateId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"{{certificateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  cert on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54d93dc3-a89b-41ba-a674-95f413d59254",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/certificate/pending/{{Certificatejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"certificate",
										"pending",
										"{{Certificatejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "firmware update on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b870e117-d3f5-4b64-9a18-3f16aa690479",
										"exec": [
											"pm.environment.set(\"resultDescription\",\"Update successfully pushed\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "005db075-30ae-4322-b51a-bcac55bc444c",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    { \r\n      \"serial\": \"189ba5405bcc\"\r\n    }\r\n  ],\r\n  \"firmwareVersion\": \"v21.10.2020-HF123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/firmware",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"firmware"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pending  firmware update on device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5e0a466-b7bc-45b7-8a92-40f2ed201e3a",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/firmwares/pending/{{Firmwarejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"firmwares",
										"pending",
										"{{Firmwarejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Software_update_on_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "651af7cc-5214-493f-b3c6-390925ee2f98",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bcc\"\r\n    }\r\n  ],\r\n  \"force\": true,\r\n  \"restart\": true,\r\n  \"softwarePackageId\": \"ea322203-c0f9-4b86-a772-b17c3f387c64\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete pending job on device",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7c56f75-2b6a-45af-926d-d193e8a83823",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bafb1c56-a584-417a-bc02-88def093c767",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/{{deviceserial}}/softwarepackages/pending/{{Softwarepackagejobid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"{{deviceserial}}",
										"softwarepackages",
										"pending",
										"{{Softwarepackagejobid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_software_package_on_device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c05a20a-210d-4ca3-8fb8-f0b4db1d19e0",
										"exec": [
											"pm.test(\"response_eventlogs\", function () {\r",
											" pm.response.to.have.status(401);\r",
											"});\r",
											" \r",
											"var response_data = pm.response.json();\r",
											"console.log(response_data) \r",
											"\r",
											"\r",
											"pm.test(\"Auth_failed_validation\",function(){\r",
											"pm.expect(response_data[\"message\"]).to.deep.equal(\"Authorization failed\")\r",
											"pm.expect(response_data[\"status\"]).to.deep.equal(\"UNAUTHORIZED\")\r",
											"pm.expect(response_data[\"code\"]).to.deep.equal(401)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{UnAuthorizedCode}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"devices\": [\r\n    {\r\n      \"serial\": \"189ba5405bcc\"\r\n    }\r\n  ],\r\n  \"softwarePackageId\": \"e915745f-328f-4fe4-ba82-dd0a4fd91b6d\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/tenants/{{tenantId}}/devices/softwarepackage",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"tenants",
										"{{tenantId}}",
										"devices",
										"softwarepackage"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}